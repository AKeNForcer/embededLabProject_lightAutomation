
finalprog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006990  08006990  00016990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c48  08006c48  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c50  08006c50  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001dc  08006e34  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006e34  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b882  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a52  00000000  00000000  0002ba8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  0002e120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160ac  00000000  00000000  0002ec88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008982  00000000  00000000  00044d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f434  00000000  00000000  0004d6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcaea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d9c  00000000  00000000  000dcb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006978 	.word	0x08006978

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006978 	.word	0x08006978

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <usDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void usDelay(uint32_t uSec)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d801      	bhi.n	8000f6a <usDelay+0x12>
 8000f66:	2302      	movs	r3, #2
 8000f68:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <usDelay+0x60>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <usDelay+0x60>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <usDelay+0x60>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <usDelay+0x60>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <usDelay+0x60>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <usDelay+0x60>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8000f90:	bf00      	nop
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <usDelay+0x60>)
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d1f9      	bne.n	8000f92 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <usDelay+0x60>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <usDelay+0x60>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6113      	str	r3, [r2, #16]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40000800 	.word	0x40000800

08000fbc <HAL_TIM_PeriodElapsedCallback>:
char uartBuf[100];
char uartBuf_2[100];
char input[100];
int timeout_count = 0;
uint16_t AD_RES = 0, Vamb, DC_Multiplier;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d11e      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x4e>
		HAL_ADC_Start(&hadc1);
 8000fcc:	4812      	ldr	r0, [pc, #72]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fce:	f000 ff41 	bl	8001e54 <HAL_ADC_Start>
	  // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fd6:	f000 ffe3 	bl	8001fa0 <HAL_ADC_PollForConversion>
	  // Read The ADC Conversion Result & Map It To PWM DutyCycle
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fdc:	f001 f864 	bl	80020a8 <HAL_ADC_GetValue>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fe6:	801a      	strh	r2, [r3, #0]


	  sprintf(uartBuf_2, "TID: %d\r\n",AD_RES);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	490c      	ldr	r1, [pc, #48]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff2:	f004 f8e1 	bl	80051b8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf_2, strlen(uartBuf_2), 100);
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff8:	f7ff f8f2 	bl	80001e0 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001006:	f002 ffea 	bl	8003fde <HAL_UART_Transmit>
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000328 	.word	0x20000328
 8001018:	20000368 	.word	0x20000368
 800101c:	20000208 	.word	0x20000208
 8001020:	08006990 	.word	0x08006990
 8001024:	200002c0 	.word	0x200002c0
 8001028:	20000458 	.word	0x20000458
 800102c:	00000000 	.word	0x00000000

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t numTicks = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
	uint32_t numTicks_2=0;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fe31 	bl	8001ca4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f9fb 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 fbaf 	bl	80017a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800104a:	f000 fb83 	bl	8001754 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800104e:	f000 fb09 	bl	8001664 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001052:	f000 fa5d 	bl	8001510 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001056:	f000 faad 	bl	80015b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800105a:	f000 fb51 	bl	8001700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800105e:	48ba      	ldr	r0, [pc, #744]	; (8001348 <main+0x318>)
 8001060:	f000 fef8 	bl	8001e54 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001064:	2101      	movs	r1, #1
 8001066:	48b8      	ldr	r0, [pc, #736]	; (8001348 <main+0x318>)
 8001068:	f000 ff9a 	bl	8001fa0 <HAL_ADC_PollForConversion>
    Vamb = HAL_ADC_GetValue(&hadc1);
 800106c:	48b6      	ldr	r0, [pc, #728]	; (8001348 <main+0x318>)
 800106e:	f001 f81b 	bl	80020a8 <HAL_ADC_GetValue>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	4bb5      	ldr	r3, [pc, #724]	; (800134c <main+0x31c>)
 8001078:	801a      	strh	r2, [r3, #0]
    DC_Multiplier = 65535/(4096-Vamb);
 800107a:	4bb4      	ldr	r3, [pc, #720]	; (800134c <main+0x31c>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001086:	fb92 f3f3 	sdiv	r3, r2, r3
 800108a:	b29a      	uxth	r2, r3
 800108c:	4bb0      	ldr	r3, [pc, #704]	; (8001350 <main+0x320>)
 800108e:	801a      	strh	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim3);
 8001090:	48b0      	ldr	r0, [pc, #704]	; (8001354 <main+0x324>)
 8001092:	f002 f998 	bl	80033c6 <HAL_TIM_Base_Start_IT>
    int counttemp=0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(counttemp==10) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0a      	cmp	r3, #10
 800109e:	d120      	bne.n	80010e2 <main+0xb2>
		  sprintf(uartBuf, "data %d %d;\r\n", count, AD_RES);
 80010a0:	4bad      	ldr	r3, [pc, #692]	; (8001358 <main+0x328>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4bad      	ldr	r3, [pc, #692]	; (800135c <main+0x32c>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	49ad      	ldr	r1, [pc, #692]	; (8001360 <main+0x330>)
 80010aa:	48ae      	ldr	r0, [pc, #696]	; (8001364 <main+0x334>)
 80010ac:	f004 f884 	bl	80051b8 <siprintf>
	    			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 1000);
 80010b0:	48ac      	ldr	r0, [pc, #688]	; (8001364 <main+0x334>)
 80010b2:	f7ff f895 	bl	80001e0 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	49a9      	ldr	r1, [pc, #676]	; (8001364 <main+0x334>)
 80010c0:	48a9      	ldr	r0, [pc, #676]	; (8001368 <main+0x338>)
 80010c2:	f002 ff8c 	bl	8003fde <HAL_UART_Transmit>
	    			HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 1000);
 80010c6:	48a7      	ldr	r0, [pc, #668]	; (8001364 <main+0x334>)
 80010c8:	f7ff f88a 	bl	80001e0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	49a3      	ldr	r1, [pc, #652]	; (8001364 <main+0x334>)
 80010d6:	48a5      	ldr	r0, [pc, #660]	; (800136c <main+0x33c>)
 80010d8:	f002 ff81 	bl	8003fde <HAL_UART_Transmit>

	    			counttemp=0;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	e002      	b.n	80010e8 <main+0xb8>
	  }
	  else counttemp++;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3301      	adds	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]


	  //Set TRIG to LOW for few uSec
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	48a0      	ldr	r0, [pc, #640]	; (8001370 <main+0x340>)
 80010f0:	f001 fcc2 	bl	8002a78 <HAL_GPIO_WritePin>
	  		usDelay(3);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff ff2f 	bl	8000f58 <usDelay>

	  		//*** START Ultrasonic measure routine ***//
	  		//1. Output 10 usec TRIG
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	489b      	ldr	r0, [pc, #620]	; (8001370 <main+0x340>)
 8001102:	f001 fcb9 	bl	8002a78 <HAL_GPIO_WritePin>
	  		usDelay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f7ff ff26 	bl	8000f58 <usDelay>
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	4897      	ldr	r0, [pc, #604]	; (8001370 <main+0x340>)
 8001114:	f001 fcb0 	bl	8002a78 <HAL_GPIO_WritePin>

	  		//2. Wait for ECHO pin rising edge
        timeout_count = 0;
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <main+0x344>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(ECHO_GPIO_Port_2, ECHO_Pin_2) == GPIO_PIN_RESET){
 800111e:	e01d      	b.n	800115c <main+0x12c>
          if(timeout_count >= 30000){
 8001120:	4b94      	ldr	r3, [pc, #592]	; (8001374 <main+0x344>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f247 522f 	movw	r2, #29999	; 0x752f
 8001128:	4293      	cmp	r3, r2
 800112a:	dd12      	ble.n	8001152 <main+0x122>
            sprintf(uartBuf, "before timeout %d\r\n", timeout_count);
 800112c:	4b91      	ldr	r3, [pc, #580]	; (8001374 <main+0x344>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4991      	ldr	r1, [pc, #580]	; (8001378 <main+0x348>)
 8001134:	488b      	ldr	r0, [pc, #556]	; (8001364 <main+0x334>)
 8001136:	f004 f83f 	bl	80051b8 <siprintf>
	    		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 1000);
 800113a:	488a      	ldr	r0, [pc, #552]	; (8001364 <main+0x334>)
 800113c:	f7ff f850 	bl	80001e0 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	4986      	ldr	r1, [pc, #536]	; (8001364 <main+0x334>)
 800114a:	4888      	ldr	r0, [pc, #544]	; (800136c <main+0x33c>)
 800114c:	f002 ff47 	bl	8003fde <HAL_UART_Transmit>
            goto timeout;
 8001150:	e165      	b.n	800141e <main+0x3ee>
          }
          timeout_count++;
 8001152:	4b88      	ldr	r3, [pc, #544]	; (8001374 <main+0x344>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	4a86      	ldr	r2, [pc, #536]	; (8001374 <main+0x344>)
 800115a:	6013      	str	r3, [r2, #0]
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(ECHO_GPIO_Port_2, ECHO_Pin_2) == GPIO_PIN_RESET){
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	4883      	ldr	r0, [pc, #524]	; (8001370 <main+0x340>)
 8001162:	f001 fc71 	bl	8002a48 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0d9      	beq.n	8001120 <main+0xf0>
 800116c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001170:	487f      	ldr	r0, [pc, #508]	; (8001370 <main+0x340>)
 8001172:	f001 fc69 	bl	8002a48 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0d1      	beq.n	8001120 <main+0xf0>
        }


	  		//3. Start measuring ECHO pulse width in usec
	  		numTicks = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
	  		numTicks_2=0;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET || HAL_GPIO_ReadPin(ECHO_GPIO_Port_2, ECHO_Pin_2) == GPIO_PIN_SET )
 8001184:	e04c      	b.n	8001220 <main+0x1f0>
	  		{
	  			if(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET) {
 8001186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118a:	4879      	ldr	r0, [pc, #484]	; (8001370 <main+0x340>)
 800118c:	f001 fc5c 	bl	8002a48 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d102      	bne.n	800119c <main+0x16c>
	  				numTicks++;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
	  			}
	  			if(HAL_GPIO_ReadPin(ECHO_GPIO_Port_2, ECHO_Pin_2) == GPIO_PIN_SET ) {
 800119c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a0:	4873      	ldr	r0, [pc, #460]	; (8001370 <main+0x340>)
 80011a2:	f001 fc51 	bl	8002a48 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d102      	bne.n	80011b2 <main+0x182>
	  				numTicks_2++;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
	  			}

          if(numTicks > 1500){
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d902      	bls.n	80011c2 <main+0x192>
            numTicks = 1500;
 80011bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80011c0:	60fb      	str	r3, [r7, #12]
          }
          if(numTicks_2 > 1500){
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d902      	bls.n	80011d2 <main+0x1a2>
            numTicks_2 = 1500;
 80011cc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80011d0:	60bb      	str	r3, [r7, #8]
          }

          if(numTicks >= 3000 && numTicks_2 >= 3000){
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011d8:	4293      	cmp	r3, r2
 80011da:	d91e      	bls.n	800121a <main+0x1ea>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d919      	bls.n	800121a <main+0x1ea>
            sprintf(uartBuf, "numTicks timeout\r\n");
 80011e6:	4a5f      	ldr	r2, [pc, #380]	; (8001364 <main+0x334>)
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <main+0x34c>)
 80011ea:	4615      	mov	r5, r2
 80011ec:	461c      	mov	r4, r3
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	6028      	str	r0, [r5, #0]
 80011f2:	6069      	str	r1, [r5, #4]
 80011f4:	60aa      	str	r2, [r5, #8]
 80011f6:	60eb      	str	r3, [r5, #12]
 80011f8:	8823      	ldrh	r3, [r4, #0]
 80011fa:	78a2      	ldrb	r2, [r4, #2]
 80011fc:	822b      	strh	r3, [r5, #16]
 80011fe:	4613      	mov	r3, r2
 8001200:	74ab      	strb	r3, [r5, #18]
	    		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 1000);
 8001202:	4858      	ldr	r0, [pc, #352]	; (8001364 <main+0x334>)
 8001204:	f7fe ffec 	bl	80001e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001210:	4954      	ldr	r1, [pc, #336]	; (8001364 <main+0x334>)
 8001212:	4856      	ldr	r0, [pc, #344]	; (800136c <main+0x33c>)
 8001214:	f002 fee3 	bl	8003fde <HAL_UART_Transmit>
            break;
 8001218:	e012      	b.n	8001240 <main+0x210>
          }
	  			usDelay(2); //2.8usec
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff fe9c 	bl	8000f58 <usDelay>
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET || HAL_GPIO_ReadPin(ECHO_GPIO_Port_2, ECHO_Pin_2) == GPIO_PIN_SET )
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	4852      	ldr	r0, [pc, #328]	; (8001370 <main+0x340>)
 8001226:	f001 fc0f 	bl	8002a48 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d0aa      	beq.n	8001186 <main+0x156>
 8001230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001234:	484e      	ldr	r0, [pc, #312]	; (8001370 <main+0x340>)
 8001236:	f001 fc07 	bl	8002a48 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b01      	cmp	r3, #1
 800123e:	d0a2      	beq.n	8001186 <main+0x156>
	  		};

	  		//4. Estimate distance in cm
	  		distance = (numTicks + 0.0f)*2.8*speedOfSound;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001380 <main+0x350>
 800124e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001252:	ee17 0a90 	vmov	r0, s15
 8001256:	f7ff f97f 	bl	8000558 <__aeabi_f2d>
 800125a:	a339      	add	r3, pc, #228	; (adr r3, 8001340 <main+0x310>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9d2 	bl	8000608 <__aeabi_dmul>
 8001264:	4603      	mov	r3, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4625      	mov	r5, r4
 800126a:	461c      	mov	r4, r3
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <main+0x354>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f972 	bl	8000558 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff f9c4 	bl	8000608 <__aeabi_dmul>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fc96 	bl	8000bb8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <main+0x358>)
 8001290:	601a      	str	r2, [r3, #0]
	  		distance_2= (numTicks_2 + 0.0f)*2.8*speedOfSound;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001380 <main+0x350>
 80012a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a4:	ee17 0a90 	vmov	r0, s15
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	a324      	add	r3, pc, #144	; (adr r3, 8001340 <main+0x310>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	4625      	mov	r5, r4
 80012bc:	461c      	mov	r4, r3
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <main+0x354>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f949 	bl	8000558 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4620      	mov	r0, r4
 80012cc:	4629      	mov	r1, r5
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff fc6d 	bl	8000bb8 <__aeabi_d2f>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <main+0x35c>)
 80012e2:	601a      	str	r2, [r3, #0]

	  		//5. Print to UART terminal for debugging
	  		if(distance<TRIG_DIS||distance_2<TRIG_DIS) {
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <main+0x358>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d409      	bmi.n	800130c <main+0x2dc>
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <main+0x35c>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	d56b      	bpl.n	80013e4 <main+0x3b4>
	  			//sprintf(uartBuf, "Distance (cm)  = %.1f, %.1f\r\n", distance,distance_2);
	  		//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	  			if(walking==0) {
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <main+0x360>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d13f      	bne.n	8001394 <main+0x364>
	  				if(distance_2<TRIG_DIS) walking=1;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <main+0x35c>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800131e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	d503      	bpl.n	8001330 <main+0x300>
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <main+0x360>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
	  			if(walking==0) {
 800132e:	e071      	b.n	8001414 <main+0x3e4>
	  				else walking=-1;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <main+0x360>)
 8001332:	f04f 32ff 	mov.w	r2, #4294967295
 8001336:	601a      	str	r2, [r3, #0]
	  			if(walking==0) {
 8001338:	e06c      	b.n	8001414 <main+0x3e4>
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	66666666 	.word	0x66666666
 8001344:	40066666 	.word	0x40066666
 8001348:	20000368 	.word	0x20000368
 800134c:	20000498 	.word	0x20000498
 8001350:	20000218 	.word	0x20000218
 8001354:	20000328 	.word	0x20000328
 8001358:	200001f8 	.word	0x200001f8
 800135c:	20000208 	.word	0x20000208
 8001360:	0800699c 	.word	0x0800699c
 8001364:	200003f0 	.word	0x200003f0
 8001368:	200003b0 	.word	0x200003b0
 800136c:	20000458 	.word	0x20000458
 8001370:	40020000 	.word	0x40020000
 8001374:	20000204 	.word	0x20000204
 8001378:	080069ac 	.word	0x080069ac
 800137c:	080069c0 	.word	0x080069c0
 8001380:	00000000 	.word	0x00000000
 8001384:	3c8c7e28 	.word	0x3c8c7e28
 8001388:	20000324 	.word	0x20000324
 800138c:	20000454 	.word	0x20000454
 8001390:	20000200 	.word	0x20000200
	  			}
	  			else if (walking==1) {
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <main+0x3f8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10e      	bne.n	80013ba <main+0x38a>
	  				if(distance<TRIG_DIS) {
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <main+0x3fc>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	d400      	bmi.n	80013b2 <main+0x382>
	  			if(walking==0) {
 80013b0:	e030      	b.n	8001414 <main+0x3e4>
	  					walking=2;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <main+0x3f8>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	601a      	str	r2, [r3, #0]
	  			if(walking==0) {
 80013b8:	e02c      	b.n	8001414 <main+0x3e4>
	  				}
	  			}
	  			else if (walking==-1) {
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <main+0x3f8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c2:	d127      	bne.n	8001414 <main+0x3e4>
	  				if(distance_2<TRIG_DIS) walking=-2;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <main+0x400>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80013ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d400      	bmi.n	80013da <main+0x3aa>
	  			if(walking==0) {
 80013d8:	e01c      	b.n	8001414 <main+0x3e4>
	  				if(distance_2<TRIG_DIS) walking=-2;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <main+0x3f8>)
 80013dc:	f06f 0201 	mvn.w	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
	  			if(walking==0) {
 80013e2:	e017      	b.n	8001414 <main+0x3e4>
	  			}
	  		}
	  		else {
	  			if(walking==2) count++;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <main+0x3f8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d105      	bne.n	80013f8 <main+0x3c8>
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <main+0x404>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <main+0x404>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e009      	b.n	800140c <main+0x3dc>
	  			else if(walking==-2) count--;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <main+0x3f8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f113 0f02 	cmn.w	r3, #2
 8001400:	d104      	bne.n	800140c <main+0x3dc>
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <main+0x404>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3b01      	subs	r3, #1
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <main+0x404>)
 800140a:	6013      	str	r3, [r2, #0]
	  			walking=0;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <main+0x3f8>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e000      	b.n	8001416 <main+0x3e6>
	  			if(walking==0) {
 8001414:	bf00      	nop
	  				  			      // Read The ADC Conversion Result & Map It To PWM DutyCycle
	  				  //			    	AD_RES = HAL_ADC_GetValue(&hadc1);
	  				  	//		    	sprintf(uartBuf, "TID: %d\r\n", AD_RES);
	  				  		//	    	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	  		}
	  		count2=count;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <main+0x404>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <main+0x408>)
 800141c:	6013      	str	r3, [r2, #0]
          //HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 1000);
        //}


        timeout:;
	  		HAL_Delay(50);
 800141e:	2032      	movs	r0, #50	; 0x32
 8001420:	f000 fcb2 	bl	8001d88 <HAL_Delay>
	  if(counttemp==10) {
 8001424:	e639      	b.n	800109a <main+0x6a>
 8001426:	bf00      	nop
 8001428:	20000200 	.word	0x20000200
 800142c:	20000324 	.word	0x20000324
 8001430:	20000454 	.word	0x20000454
 8001434:	200001f8 	.word	0x200001f8
 8001438:	200001fc 	.word	0x200001fc

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b094      	sub	sp, #80	; 0x50
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2230      	movs	r2, #48	; 0x30
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fa50 	bl	80048f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <SystemClock_Config+0xcc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <SystemClock_Config+0xcc>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <SystemClock_Config+0xcc>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <SystemClock_Config+0xd0>)
 8001486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <SystemClock_Config+0xd0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a0:	2310      	movs	r3, #16
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014ac:	2310      	movs	r3, #16
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014b6:	2304      	movs	r3, #4
 80014b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ba:	2304      	movs	r3, #4
 80014bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 faf2 	bl	8002aac <HAL_RCC_OscConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014ce:	f000 f9e9 	bl	80018a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2302      	movs	r3, #2
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fd4c 	bl	8002f8c <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014fa:	f000 f9d3 	bl	80018a4 <Error_Handler>
  }
}
 80014fe:	bf00      	nop
 8001500:	3750      	adds	r7, #80	; 0x50
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <MX_ADC1_Init+0x9c>)
 8001526:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_ADC1_Init+0x98>)
 800152a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800152e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_ADC1_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <MX_ADC1_Init+0xa0>)
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_ADC1_Init+0x98>)
 800155e:	2201      	movs	r2, #1
 8001560:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_ADC1_Init+0x98>)
 800156c:	2201      	movs	r2, #1
 800156e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001572:	f000 fc2b 	bl	8001dcc <HAL_ADC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800157c:	f000 f992 	bl	80018a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001580:	2307      	movs	r3, #7
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001592:	f000 fd97 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800159c:	f000 f982 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000368 	.word	0x20000368
 80015ac:	40012000 	.word	0x40012000
 80015b0:	0f000001 	.word	0x0f000001

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_TIM3_Init+0xa8>)
 80015d8:	4a21      	ldr	r2, [pc, #132]	; (8001660 <MX_TIM3_Init+0xac>)
 80015da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_TIM3_Init+0xa8>)
 80015de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM3_Init+0xa8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM3_Init+0xa8>)
 80015ec:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80015f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM3_Init+0xa8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM3_Init+0xa8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80015fe:	4817      	ldr	r0, [pc, #92]	; (800165c <MX_TIM3_Init+0xa8>)
 8001600:	f001 ff05 	bl	800340e <HAL_TIM_OC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800160a:	f000 f94b 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	4619      	mov	r1, r3
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <MX_TIM3_Init+0xa8>)
 800161e:	f002 fc0f 	bl	8003e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001628:	f000 f93c 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_TIM3_Init+0xa8>)
 8001644:	f002 f816 	bl	8003674 <HAL_TIM_OC_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800164e:	f000 f929 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000328 	.word	0x20000328
 8001660:	40000400 	.word	0x40000400

08001664 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM4_Init+0x94>)
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_TIM4_Init+0x98>)
 8001684:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM4_Init+0x94>)
 8001688:	2253      	movs	r2, #83	; 0x53
 800168a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM4_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM4_Init+0x94>)
 8001694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001698:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_TIM4_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM4_Init+0x94>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <MX_TIM4_Init+0x94>)
 80016a8:	f001 fe62 	bl	8003370 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 f8f7 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_TIM4_Init+0x94>)
 80016c4:	f002 f836 	bl	8003734 <HAL_TIM_ConfigClockSource>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80016ce:	f000 f8e9 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM4_Init+0x94>)
 80016e0:	f002 fbae 	bl	8003e40 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80016ea:	f000 f8db 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000021c 	.word	0x2000021c
 80016fc:	40000800 	.word	0x40000800

08001700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_USART1_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800170c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001738:	f002 fc04 	bl	8003f44 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f8af 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003b0 	.word	0x200003b0
 8001750:	40011000 	.word	0x40011000

08001754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_USART2_UART_Init+0x50>)
 800175c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800178c:	f002 fbda 	bl	8003f44 <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001796:	f000 f885 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000458 	.word	0x20000458
 80017a4:	40004400 	.word	0x40004400

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <MX_GPIO_Init+0xec>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a33      	ldr	r2, [pc, #204]	; (8001894 <MX_GPIO_Init+0xec>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <MX_GPIO_Init+0xec>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <MX_GPIO_Init+0xec>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <MX_GPIO_Init+0xec>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <MX_GPIO_Init+0xec>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <MX_GPIO_Init+0xec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <MX_GPIO_Init+0xec>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_GPIO_Init+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_GPIO_Init+0xec>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <MX_GPIO_Init+0xec>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_GPIO_Init+0xec>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_GPIO_Init+0xf0>)
 8001836:	f001 f91f 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800183a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_GPIO_Init+0xf4>)
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4814      	ldr	r0, [pc, #80]	; (80018a0 <MX_GPIO_Init+0xf8>)
 8001850:	f000 ff78 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001854:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <MX_GPIO_Init+0xf0>)
 800186e:	f000 ff69 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001872:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_GPIO_Init+0xf0>)
 8001888:	f000 ff5c 	bl	8002744 <HAL_GPIO_Init>

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	10210000 	.word	0x10210000
 80018a0:	40020800 	.word	0x40020800

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018aa:	e7fe      	b.n	80018aa <Error_Handler+0x6>

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ea:	2007      	movs	r0, #7
 80018ec:	f000 fee8 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_ADC_MspInit+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d127      	bne.n	800196e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_ADC_MspInit+0x80>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <HAL_ADC_MspInit+0x80>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_ADC_MspInit+0x80>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_ADC_MspInit+0x80>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_ADC_MspInit+0x80>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_ADC_MspInit+0x80>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195a:	2303      	movs	r3, #3
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_ADC_MspInit+0x84>)
 800196a:	f000 feeb 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012000 	.word	0x40012000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_TIM_OC_MspInit+0x48>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d115      	bne.n	80019c2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_TIM_OC_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_TIM_OC_MspInit+0x4c>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_OC_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	201d      	movs	r0, #29
 80019b8:	f000 fe8d 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019bc:	201d      	movs	r0, #29
 80019be:	f000 fea6 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_TIM_Base_MspInit+0x3c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10d      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_TIM_Base_MspInit+0x40>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_TIM_Base_MspInit+0x40>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_TIM_Base_MspInit+0x40>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40000800 	.word	0x40000800
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a41      	ldr	r2, [pc, #260]	; (8001b3c <HAL_UART_MspInit+0x124>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d14b      	bne.n	8001ad2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a3f      	ldr	r2, [pc, #252]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a44:	f043 0310 	orr.w	r3, r3, #16
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a38      	ldr	r2, [pc, #224]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4826      	ldr	r0, [pc, #152]	; (8001b44 <HAL_UART_MspInit+0x12c>)
 8001aac:	f000 fe4a 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481f      	ldr	r0, [pc, #124]	; (8001b48 <HAL_UART_MspInit+0x130>)
 8001acc:	f000 fe3a 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ad0:	e030      	b.n	8001b34 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_UART_MspInit+0x134>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d12b      	bne.n	8001b34 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aea:	6413      	str	r3, [r2, #64]	; 0x40
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_UART_MspInit+0x128>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b14:	230c      	movs	r3, #12
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b24:	2307      	movs	r3, #7
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_UART_MspInit+0x12c>)
 8001b30:	f000 fe08 	bl	8002744 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40004400 	.word	0x40004400

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <NMI_Handler+0x4>

08001b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>

08001b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f000 f8d4 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <TIM3_IRQHandler+0x10>)
 8001baa:	f001 fc5b 	bl	8003464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000328 	.word	0x20000328

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f002 fe58 	bl	800489c <__errno>
 8001bec:	4602      	mov	r2, r0
 8001bee:	230c      	movs	r3, #12
 8001bf0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20020000 	.word	0x20020000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	2000020c 	.word	0x2000020c
 8001c20:	200004a8 	.word	0x200004a8

08001c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <SystemInit+0x28>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <SystemInit+0x28>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SystemInit+0x28>)
 8001c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c56:	e003      	b.n	8001c60 <LoopCopyDataInit>

08001c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c5e:	3104      	adds	r1, #4

08001c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c68:	d3f6      	bcc.n	8001c58 <CopyDataInit>
  ldr  r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c6c:	e002      	b.n	8001c74 <LoopFillZerobss>

08001c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c70:	f842 3b04 	str.w	r3, [r2], #4

08001c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c78:	d3f9      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffd3 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f002 fe13 	bl	80048a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff f9d5 	bl	8001030 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c8c:	08006c58 	.word	0x08006c58
  ldr  r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c94:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001c98:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001c9c:	200004a4 	.word	0x200004a4

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_Init+0x40>)
 8001cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_Init+0x40>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x40>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 fcf7 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fde8 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fd0f 	bl	800272a <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 fcd7 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	2000049c 	.word	0x2000049c

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2000049c 	.word	0x2000049c

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_Delay+0x40>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000008 	.word	0x20000008

08001dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e033      	b.n	8001e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fd86 	bl	80018fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa82 	bl	8002328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_Start+0x1a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e08a      	b.n	8001f84 <HAL_ADC_Start+0x130>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d018      	beq.n	8001eb6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e94:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <HAL_ADC_Start+0x13c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3e      	ldr	r2, [pc, #248]	; (8001f94 <HAL_ADC_Start+0x140>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9a      	lsrs	r2, r3, #18
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ea8:	e002      	b.n	8001eb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f9      	bne.n	8001eaa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d15e      	bne.n	8001f82 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d106      	bne.n	8001f12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f023 0206 	bic.w	r2, r3, #6
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_ADC_Start+0x144>)
 8001f22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11c      	bne.n	8001f82 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e013      	b.n	8001f82 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_ADC_Start+0x148>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10e      	bne.n	8001f82 <HAL_ADC_Start+0x12e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f80:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	40012000 	.word	0x40012000

08001fa0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbc:	d113      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0220 	orr.w	r2, r3, #32
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e05c      	b.n	80020a0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fe6:	f7ff fec3 	bl	8001d70 <HAL_GetTick>
 8001fea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fec:	e01a      	b.n	8002024 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d016      	beq.n	8002024 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_ADC_PollForConversion+0x6c>
 8001ffc:	f7ff feb8 	bl	8001d70 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d20b      	bcs.n	8002024 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f043 0204 	orr.w	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e03d      	b.n	80020a0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d1dd      	bne.n	8001fee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0212 	mvn.w	r2, #18
 800203a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d123      	bne.n	800209e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11f      	bne.n	800209e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002076:	2b00      	cmp	r3, #0
 8002078:	d111      	bne.n	800209e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1c>
 80020dc:	2302      	movs	r3, #2
 80020de:	e113      	b.n	8002308 <HAL_ADC_ConfigChannel+0x244>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d925      	bls.n	800213c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68d9      	ldr	r1, [r3, #12]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3b1e      	subs	r3, #30
 8002106:	2207      	movs	r2, #7
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	4603      	mov	r3, r0
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4403      	add	r3, r0
 800212e:	3b1e      	subs	r3, #30
 8002130:	409a      	lsls	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e022      	b.n	8002182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	2207      	movs	r2, #7
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	400a      	ands	r2, r1
 800215e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6919      	ldr	r1, [r3, #16]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	4603      	mov	r3, r0
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4403      	add	r3, r0
 8002178:	409a      	lsls	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b06      	cmp	r3, #6
 8002188:	d824      	bhi.n	80021d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b05      	subs	r3, #5
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b05      	subs	r3, #5
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
 80021d2:	e04c      	b.n	800226e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d824      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b23      	subs	r3, #35	; 0x23
 80021ee:	221f      	movs	r2, #31
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43da      	mvns	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	400a      	ands	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b23      	subs	r3, #35	; 0x23
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
 8002224:	e023      	b.n	800226e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b41      	subs	r3, #65	; 0x41
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b41      	subs	r3, #65	; 0x41
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_ADC_ConfigChannel+0x250>)
 8002270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_ADC_ConfigChannel+0x254>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10f      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1d8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d10b      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_ADC_ConfigChannel+0x254>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12b      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x23a>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_ADC_ConfigChannel+0x258>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x1f4>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b11      	cmp	r3, #17
 80022b6:	d122      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_ADC_ConfigChannel+0x258>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_ADC_ConfigChannel+0x25c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_ADC_ConfigChannel+0x260>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0c9a      	lsrs	r2, r3, #18
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f9      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40012300 	.word	0x40012300
 8002318:	40012000 	.word	0x40012000
 800231c:	10000012 	.word	0x10000012
 8002320:	20000000 	.word	0x20000000
 8002324:	431bde83 	.word	0x431bde83

08002328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002330:	4b79      	ldr	r3, [pc, #484]	; (8002518 <ADC_Init+0x1f0>)
 8002332:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800235c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	021a      	lsls	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	4a58      	ldr	r2, [pc, #352]	; (800251c <ADC_Init+0x1f4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e00f      	b.n	8002426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0202 	bic.w	r2, r2, #2
 8002434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
 8002440:	005a      	lsls	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	3b01      	subs	r3, #1
 8002480:	035a      	lsls	r2, r3, #13
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	e007      	b.n	800249c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	051a      	lsls	r2, r3, #20
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024de:	025a      	lsls	r2, r3, #9
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	029a      	lsls	r2, r3, #10
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40012300 	.word	0x40012300
 800251c:	0f000001 	.word	0x0f000001

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e159      	b.n	8002a14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8148 	bne.w	8002a0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d00b      	beq.n	800279e <HAL_GPIO_Init+0x5a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002792:	2b11      	cmp	r3, #17
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d130      	bne.n	8002800 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 0201 	and.w	r2, r3, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0xfc>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b12      	cmp	r3, #18
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a2 	beq.w	8002a0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_GPIO_Init+0x2e4>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a55      	ldr	r2, [pc, #340]	; (8002a28 <HAL_GPIO_Init+0x2e4>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_GPIO_Init+0x2e4>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a51      	ldr	r2, [pc, #324]	; (8002a2c <HAL_GPIO_Init+0x2e8>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_GPIO_Init+0x2ec>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_GPIO_Init+0x202>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <HAL_GPIO_Init+0x2f0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x1fe>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <HAL_GPIO_Init+0x2f4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x1fa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <HAL_GPIO_Init+0x2f8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x1f6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <HAL_GPIO_Init+0x2fc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x1f2>
 8002932:	2304      	movs	r3, #4
 8002934:	e008      	b.n	8002948 <HAL_GPIO_Init+0x204>
 8002936:	2307      	movs	r3, #7
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x204>
 800293a:	2303      	movs	r3, #3
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x204>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x204>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x204>
 8002946:	2300      	movs	r3, #0
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f002 0203 	and.w	r2, r2, #3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4093      	lsls	r3, r2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002958:	4934      	ldr	r1, [pc, #208]	; (8002a2c <HAL_GPIO_Init+0x2e8>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <HAL_GPIO_Init+0x300>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_GPIO_Init+0x300>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_GPIO_Init+0x300>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_GPIO_Init+0x300>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3301      	adds	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	f67f aea2 	bls.w	8002760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3724      	adds	r7, #36	; 0x24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020400 	.word	0x40020400
 8002a38:	40020800 	.word	0x40020800
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e001      	b.n	8002a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e25b      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d075      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aca:	4ba3      	ldr	r3, [pc, #652]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d00c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d112      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aee:	d10b      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4b99      	ldr	r3, [pc, #612]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d157      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e236      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x74>
 8002b12:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a90      	ldr	r2, [pc, #576]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a8a      	ldr	r2, [pc, #552]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a87      	ldr	r2, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b44:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a80      	ldr	r2, [pc, #512]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff f904 	bl	8001d70 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff f900 	bl	8001d70 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1fb      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f8f0 	bl	8001d70 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff f8ec 	bl	8001d70 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1e7      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1bb      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4952      	ldr	r1, [pc, #328]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e03a      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCC_OscConfig+0x2b0>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7ff f8a5 	bl	8001d70 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7ff f8a1 	bl	8001d70 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e19c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4940      	ldr	r1, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_OscConfig+0x2b0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7ff f884 	bl	8001d70 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7ff f880 	bl	8001d70 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e17b      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d030      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_RCC_OscConfig+0x2b4>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7ff f864 	bl	8001d70 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7ff f860 	bl	8001d70 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e15b      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x200>
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_OscConfig+0x2b4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f84d 	bl	8001d70 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cda:	f7ff f849 	bl	8001d70 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e144      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a0 	beq.w	8002e46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x2b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d121      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_RCC_OscConfig+0x2b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_RCC_OscConfig+0x2b8>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f80f 	bl	8001d70 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e011      	b.n	8002d7a <HAL_RCC_OscConfig+0x2ce>
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470000 	.word	0x42470000
 8002d60:	42470e80 	.word	0x42470e80
 8002d64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7ff f802 	bl	8001d70 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0fd      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x4d4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9a:	e01c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x32a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d10c      	bne.n	8002dbe <HAL_RCC_OscConfig+0x312>
 8002da4:	4b77      	ldr	r3, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a76      	ldr	r2, [pc, #472]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a73      	ldr	r2, [pc, #460]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x32a>
 8002dbe:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a70      	ldr	r2, [pc, #448]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	4b6e      	ldr	r3, [pc, #440]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a6d      	ldr	r2, [pc, #436]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe ffc7 	bl	8001d70 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe ffc3 	bl	8001d70 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0bc      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ee      	beq.n	8002de6 <HAL_RCC_OscConfig+0x33a>
 8002e08:	e014      	b.n	8002e34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe ffb1 	bl	8001d70 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe ffad 	bl	8001d70 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0a6      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3a:	4b52      	ldr	r3, [pc, #328]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8092 	beq.w	8002f74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d05c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d141      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCC_OscConfig+0x4dc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe ff81 	bl	8001d70 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe ff7d 	bl	8001d70 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e078      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e84:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	019b      	lsls	r3, r3, #6
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	4933      	ldr	r1, [pc, #204]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_RCC_OscConfig+0x4dc>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe ff56 	bl	8001d70 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe ff52 	bl	8001d70 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04d      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
 8002ee6:	e045      	b.n	8002f74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_OscConfig+0x4dc>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe ff3f 	bl	8001d70 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe ff3b 	bl	8001d70 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e036      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x44a>
 8002f14:	e02e      	b.n	8002f74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e029      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_RCC_OscConfig+0x4d8>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d11c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d115      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40007000 	.word	0x40007000
 8002f84:	40023800 	.word	0x40023800
 8002f88:	42470060 	.word	0x42470060

08002f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cc      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b68      	ldr	r3, [pc, #416]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d90c      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b8      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	494d      	ldr	r1, [pc, #308]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d044      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d119      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e067      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4934      	ldr	r1, [pc, #208]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7fe fe78 	bl	8001d70 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7fe fe74 	bl	8001d70 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e04f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 020c 	and.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1eb      	bne.n	8003084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d20c      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b22      	ldr	r3, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e032      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4916      	ldr	r1, [pc, #88]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003112:	f000 f821 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003116:	4601      	mov	r1, r0
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	fa21 f303 	lsr.w	r3, r1, r3
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fdd8 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023c00 	.word	0x40023c00
 8003148:	40023800 	.word	0x40023800
 800314c:	080069d4 	.word	0x080069d4
 8003150:	20000000 	.word	0x20000000
 8003154:	20000004 	.word	0x20000004

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	2300      	movs	r3, #0
 8003168:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d007      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x32>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d008      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x38>
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 80b4 	bne.w	80032ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003186:	60bb      	str	r3, [r7, #8]
       break;
 8003188:	e0b3      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b5e      	ldr	r3, [pc, #376]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800318c:	60bb      	str	r3, [r7, #8]
      break;
 800318e:	e0b0      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003198:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319a:	4b58      	ldr	r3, [pc, #352]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04a      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b55      	ldr	r3, [pc, #340]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	f04f 0400 	mov.w	r4, #0
 80031b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	ea03 0501 	and.w	r5, r3, r1
 80031bc:	ea04 0602 	and.w	r6, r4, r2
 80031c0:	4629      	mov	r1, r5
 80031c2:	4632      	mov	r2, r6
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	0154      	lsls	r4, r2, #5
 80031ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031d2:	014b      	lsls	r3, r1, #5
 80031d4:	4619      	mov	r1, r3
 80031d6:	4622      	mov	r2, r4
 80031d8:	1b49      	subs	r1, r1, r5
 80031da:	eb62 0206 	sbc.w	r2, r2, r6
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	0194      	lsls	r4, r2, #6
 80031e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031ec:	018b      	lsls	r3, r1, #6
 80031ee:	1a5b      	subs	r3, r3, r1
 80031f0:	eb64 0402 	sbc.w	r4, r4, r2
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	00e2      	lsls	r2, r4, #3
 80031fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003202:	00d9      	lsls	r1, r3, #3
 8003204:	460b      	mov	r3, r1
 8003206:	4614      	mov	r4, r2
 8003208:	195b      	adds	r3, r3, r5
 800320a:	eb44 0406 	adc.w	r4, r4, r6
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	0262      	lsls	r2, r4, #9
 8003218:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800321c:	0259      	lsls	r1, r3, #9
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	4618      	mov	r0, r3
 8003224:	4621      	mov	r1, r4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	461a      	mov	r2, r3
 800322e:	4623      	mov	r3, r4
 8003230:	f7fd fd12 	bl	8000c58 <__aeabi_uldivmod>
 8003234:	4603      	mov	r3, r0
 8003236:	460c      	mov	r4, r1
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e049      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	f240 11ff 	movw	r1, #511	; 0x1ff
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	ea03 0501 	and.w	r5, r3, r1
 8003252:	ea04 0602 	and.w	r6, r4, r2
 8003256:	4629      	mov	r1, r5
 8003258:	4632      	mov	r2, r6
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	f04f 0400 	mov.w	r4, #0
 8003262:	0154      	lsls	r4, r2, #5
 8003264:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003268:	014b      	lsls	r3, r1, #5
 800326a:	4619      	mov	r1, r3
 800326c:	4622      	mov	r2, r4
 800326e:	1b49      	subs	r1, r1, r5
 8003270:	eb62 0206 	sbc.w	r2, r2, r6
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	f04f 0400 	mov.w	r4, #0
 800327c:	0194      	lsls	r4, r2, #6
 800327e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003282:	018b      	lsls	r3, r1, #6
 8003284:	1a5b      	subs	r3, r3, r1
 8003286:	eb64 0402 	sbc.w	r4, r4, r2
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003298:	00d9      	lsls	r1, r3, #3
 800329a:	460b      	mov	r3, r1
 800329c:	4614      	mov	r4, r2
 800329e:	195b      	adds	r3, r3, r5
 80032a0:	eb44 0406 	adc.w	r4, r4, r6
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	02a2      	lsls	r2, r4, #10
 80032ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032b2:	0299      	lsls	r1, r3, #10
 80032b4:	460b      	mov	r3, r1
 80032b6:	4614      	mov	r4, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	4621      	mov	r1, r4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	f7fd fcc7 	bl	8000c58 <__aeabi_uldivmod>
 80032ca:	4603      	mov	r3, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	60bb      	str	r3, [r7, #8]
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032ee:	60bb      	str	r3, [r7, #8]
      break;
 80032f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f2:	68bb      	ldr	r3, [r7, #8]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCC_GetHCLKFreq+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003324:	f7ff fff0 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003328:	4601      	mov	r1, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4a03      	ldr	r2, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003336:	5cd3      	ldrb	r3, [r2, r3]
 8003338:	fa21 f303 	lsr.w	r3, r1, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	080069e4 	.word	0x080069e4

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff ffdc 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003350:	4601      	mov	r1, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0b5b      	lsrs	r3, r3, #13
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4a03      	ldr	r2, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	080069e4 	.word	0x080069e4

08003370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01d      	b.n	80033be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fb1c 	bl	80019d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 faa0 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b06      	cmp	r3, #6
 80033ee:	d007      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e01d      	b.n	800345c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fe faa5 	bl	8001984 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 fa51 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0202 	mvn.w	r2, #2
 8003490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa05 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9f7 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa08 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0204 	mvn.w	r2, #4
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9db 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9cd 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f9de 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0208 	mvn.w	r2, #8
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9b1 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9a3 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f9b4 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b10      	cmp	r3, #16
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2208      	movs	r2, #8
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f987 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f979 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f98a 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fcea 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fc8e 	bl	8003f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f94f 	bl	80038de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b20      	cmp	r3, #32
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0220 	mvn.w	r2, #32
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fc58 	bl	8003f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_TIM_OC_ConfigChannel+0x1a>
 800368a:	2302      	movs	r3, #2
 800368c:	e04e      	b.n	800372c <HAL_TIM_OC_ConfigChannel+0xb8>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d839      	bhi.n	8003718 <HAL_TIM_OC_ConfigChannel+0xa4>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_TIM_OC_ConfigChannel+0x38>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	08003719 	.word	0x08003719
 80036b4:	08003719 	.word	0x08003719
 80036b8:	08003719 	.word	0x08003719
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	08003719 	.word	0x08003719
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003719 	.word	0x08003719
 80036cc:	080036fd 	.word	0x080036fd
 80036d0:	08003719 	.word	0x08003719
 80036d4:	08003719 	.word	0x08003719
 80036d8:	08003719 	.word	0x08003719
 80036dc:	0800370b 	.word	0x0800370b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f984 	bl	80039f4 <TIM_OC1_SetConfig>
      break;
 80036ec:	e015      	b.n	800371a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f9e3 	bl	8003ac0 <TIM_OC2_SetConfig>
      break;
 80036fa:	e00e      	b.n	800371a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fa48 	bl	8003b98 <TIM_OC3_SetConfig>
      break;
 8003708:	e007      	b.n	800371a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 faab 	bl	8003c6c <TIM_OC4_SetConfig>
      break;
 8003716:	e000      	b.n	800371a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003718:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x18>
 8003748:	2302      	movs	r3, #2
 800374a:	e0a6      	b.n	800389a <HAL_TIM_ConfigClockSource+0x166>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d067      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x120>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d80b      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x6c>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d073      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x140>
 800378c:	2b10      	cmp	r3, #16
 800378e:	d802      	bhi.n	8003796 <HAL_TIM_ConfigClockSource+0x62>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d06f      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003794:	e078      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003796:	2b20      	cmp	r3, #32
 8003798:	d06c      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x140>
 800379a:	2b30      	cmp	r3, #48	; 0x30
 800379c:	d06a      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800379e:	e073      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d00d      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x8c>
 80037a4:	2b70      	cmp	r3, #112	; 0x70
 80037a6:	d804      	bhi.n	80037b2 <HAL_TIM_ConfigClockSource+0x7e>
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d033      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0xe0>
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d041      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037b0:	e06a      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d066      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x152>
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d017      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037be:	e063      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f000 fb16 	bl	8003e00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
      break;
 80037ec:	e04c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f000 faff 	bl	8003e00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003810:	609a      	str	r2, [r3, #8]
      break;
 8003812:	e039      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	461a      	mov	r2, r3
 8003822:	f000 fa73 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2150      	movs	r1, #80	; 0x50
 800382c:	4618      	mov	r0, r3
 800382e:	f000 facc 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003832:	e029      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	461a      	mov	r2, r3
 8003842:	f000 fa92 	bl	8003d6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2160      	movs	r1, #96	; 0x60
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fabc 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003852:	e019      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	461a      	mov	r2, r3
 8003862:	f000 fa53 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2140      	movs	r1, #64	; 0x40
 800386c:	4618      	mov	r0, r3
 800386e:	f000 faac 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003872:	e009      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 faa3 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003884:	e000      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <TIM_Base_SetConfig+0xe4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00f      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d00b      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a31      	ldr	r2, [pc, #196]	; (80039dc <TIM_Base_SetConfig+0xe8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <TIM_Base_SetConfig+0xec>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <TIM_Base_SetConfig+0xf0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d108      	bne.n	800393e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0xe4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01b      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d017      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a22      	ldr	r2, [pc, #136]	; (80039dc <TIM_Base_SetConfig+0xe8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <TIM_Base_SetConfig+0xec>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00f      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <TIM_Base_SetConfig+0xf0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <TIM_Base_SetConfig+0xf4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <TIM_Base_SetConfig+0xf8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <TIM_Base_SetConfig+0xfc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <TIM_Base_SetConfig+0xe4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	615a      	str	r2, [r3, #20]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400
 80039f0:	40014800 	.word	0x40014800

080039f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f023 0201 	bic.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <TIM_OC1_SetConfig+0xc8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10c      	bne.n	8003a6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0308 	bic.w	r3, r3, #8
 8003a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <TIM_OC1_SetConfig+0xc8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d111      	bne.n	8003a96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40010000 	.word	0x40010000

08003ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0210 	bic.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0320 	bic.w	r3, r3, #32
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <TIM_OC2_SetConfig+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10d      	bne.n	8003b3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <TIM_OC2_SetConfig+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d113      	bne.n	8003b6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000

08003b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <TIM_OC3_SetConfig+0xd0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10d      	bne.n	8003c12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <TIM_OC3_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d113      	bne.n	8003c42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40010000 	.word	0x40010000

08003c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	031b      	lsls	r3, r3, #12
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <TIM_OC4_SetConfig+0x9c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f043 0307 	orr.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e050      	b.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d013      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40014000 	.word	0x40014000

08003f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e03f      	b.n	8003fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fd54 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f90b 	bl	80041a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b088      	sub	sp, #32
 8003fe2:	af02      	add	r7, sp, #8
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 8083 	bne.w	8004106 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_UART_Transmit+0x2e>
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e07b      	b.n	8004108 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_UART_Transmit+0x40>
 800401a:	2302      	movs	r3, #2
 800401c:	e074      	b.n	8004108 <HAL_UART_Transmit+0x12a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2221      	movs	r2, #33	; 0x21
 8004030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004034:	f7fd fe9c 	bl	8001d70 <HAL_GetTick>
 8004038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800404e:	e042      	b.n	80040d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d122      	bne.n	80040ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f84c 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e042      	b.n	8004108 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004094:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3302      	adds	r3, #2
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	e017      	b.n	80040d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	e013      	b.n	80040d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f829 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e01f      	b.n	8004108 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	60ba      	str	r2, [r7, #8]
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1b7      	bne.n	8004050 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f810 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e006      	b.n	8004108 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004120:	e02c      	b.n	800417c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d028      	beq.n	800417c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x30>
 8004130:	f7fd fe1e 	bl	8001d70 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	429a      	cmp	r2, r3
 800413e:	d21d      	bcs.n	800417c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800414e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e00f      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	429a      	cmp	r2, r3
 8004198:	d0c3      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041e6:	f023 030c 	bic.w	r3, r3, #12
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004212:	f040 818b 	bne.w	800452c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4ac1      	ldr	r2, [pc, #772]	; (8004520 <UART_SetConfig+0x37c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d005      	beq.n	800422c <UART_SetConfig+0x88>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4abf      	ldr	r2, [pc, #764]	; (8004524 <UART_SetConfig+0x380>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f040 80bd 	bne.w	80043a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800422c:	f7ff f88c 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 8004230:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	461d      	mov	r5, r3
 8004236:	f04f 0600 	mov.w	r6, #0
 800423a:	46a8      	mov	r8, r5
 800423c:	46b1      	mov	r9, r6
 800423e:	eb18 0308 	adds.w	r3, r8, r8
 8004242:	eb49 0409 	adc.w	r4, r9, r9
 8004246:	4698      	mov	r8, r3
 8004248:	46a1      	mov	r9, r4
 800424a:	eb18 0805 	adds.w	r8, r8, r5
 800424e:	eb49 0906 	adc.w	r9, r9, r6
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800425e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004262:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004266:	4688      	mov	r8, r1
 8004268:	4691      	mov	r9, r2
 800426a:	eb18 0005 	adds.w	r0, r8, r5
 800426e:	eb49 0106 	adc.w	r1, r9, r6
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	461d      	mov	r5, r3
 8004278:	f04f 0600 	mov.w	r6, #0
 800427c:	196b      	adds	r3, r5, r5
 800427e:	eb46 0406 	adc.w	r4, r6, r6
 8004282:	461a      	mov	r2, r3
 8004284:	4623      	mov	r3, r4
 8004286:	f7fc fce7 	bl	8000c58 <__aeabi_uldivmod>
 800428a:	4603      	mov	r3, r0
 800428c:	460c      	mov	r4, r1
 800428e:	461a      	mov	r2, r3
 8004290:	4ba5      	ldr	r3, [pc, #660]	; (8004528 <UART_SetConfig+0x384>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	461d      	mov	r5, r3
 80042a0:	f04f 0600 	mov.w	r6, #0
 80042a4:	46a9      	mov	r9, r5
 80042a6:	46b2      	mov	sl, r6
 80042a8:	eb19 0309 	adds.w	r3, r9, r9
 80042ac:	eb4a 040a 	adc.w	r4, sl, sl
 80042b0:	4699      	mov	r9, r3
 80042b2:	46a2      	mov	sl, r4
 80042b4:	eb19 0905 	adds.w	r9, r9, r5
 80042b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042d0:	4689      	mov	r9, r1
 80042d2:	4692      	mov	sl, r2
 80042d4:	eb19 0005 	adds.w	r0, r9, r5
 80042d8:	eb4a 0106 	adc.w	r1, sl, r6
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	461d      	mov	r5, r3
 80042e2:	f04f 0600 	mov.w	r6, #0
 80042e6:	196b      	adds	r3, r5, r5
 80042e8:	eb46 0406 	adc.w	r4, r6, r6
 80042ec:	461a      	mov	r2, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	f7fc fcb2 	bl	8000c58 <__aeabi_uldivmod>
 80042f4:	4603      	mov	r3, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b8b      	ldr	r3, [pc, #556]	; (8004528 <UART_SetConfig+0x384>)
 80042fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	2164      	movs	r1, #100	; 0x64
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	3332      	adds	r3, #50	; 0x32
 800430e:	4a86      	ldr	r2, [pc, #536]	; (8004528 <UART_SetConfig+0x384>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800431c:	4498      	add	r8, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	461d      	mov	r5, r3
 8004322:	f04f 0600 	mov.w	r6, #0
 8004326:	46a9      	mov	r9, r5
 8004328:	46b2      	mov	sl, r6
 800432a:	eb19 0309 	adds.w	r3, r9, r9
 800432e:	eb4a 040a 	adc.w	r4, sl, sl
 8004332:	4699      	mov	r9, r3
 8004334:	46a2      	mov	sl, r4
 8004336:	eb19 0905 	adds.w	r9, r9, r5
 800433a:	eb4a 0a06 	adc.w	sl, sl, r6
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800434a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800434e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004352:	4689      	mov	r9, r1
 8004354:	4692      	mov	sl, r2
 8004356:	eb19 0005 	adds.w	r0, r9, r5
 800435a:	eb4a 0106 	adc.w	r1, sl, r6
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	461d      	mov	r5, r3
 8004364:	f04f 0600 	mov.w	r6, #0
 8004368:	196b      	adds	r3, r5, r5
 800436a:	eb46 0406 	adc.w	r4, r6, r6
 800436e:	461a      	mov	r2, r3
 8004370:	4623      	mov	r3, r4
 8004372:	f7fc fc71 	bl	8000c58 <__aeabi_uldivmod>
 8004376:	4603      	mov	r3, r0
 8004378:	460c      	mov	r4, r1
 800437a:	461a      	mov	r2, r3
 800437c:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <UART_SetConfig+0x384>)
 800437e:	fba3 1302 	umull	r1, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2164      	movs	r1, #100	; 0x64
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	3332      	adds	r3, #50	; 0x32
 8004390:	4a65      	ldr	r2, [pc, #404]	; (8004528 <UART_SetConfig+0x384>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 0207 	and.w	r2, r3, #7
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4442      	add	r2, r8
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	e26f      	b.n	8004886 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7fe ffbb 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 80043aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	461d      	mov	r5, r3
 80043b0:	f04f 0600 	mov.w	r6, #0
 80043b4:	46a8      	mov	r8, r5
 80043b6:	46b1      	mov	r9, r6
 80043b8:	eb18 0308 	adds.w	r3, r8, r8
 80043bc:	eb49 0409 	adc.w	r4, r9, r9
 80043c0:	4698      	mov	r8, r3
 80043c2:	46a1      	mov	r9, r4
 80043c4:	eb18 0805 	adds.w	r8, r8, r5
 80043c8:	eb49 0906 	adc.w	r9, r9, r6
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043e0:	4688      	mov	r8, r1
 80043e2:	4691      	mov	r9, r2
 80043e4:	eb18 0005 	adds.w	r0, r8, r5
 80043e8:	eb49 0106 	adc.w	r1, r9, r6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	461d      	mov	r5, r3
 80043f2:	f04f 0600 	mov.w	r6, #0
 80043f6:	196b      	adds	r3, r5, r5
 80043f8:	eb46 0406 	adc.w	r4, r6, r6
 80043fc:	461a      	mov	r2, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	f7fc fc2a 	bl	8000c58 <__aeabi_uldivmod>
 8004404:	4603      	mov	r3, r0
 8004406:	460c      	mov	r4, r1
 8004408:	461a      	mov	r2, r3
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <UART_SetConfig+0x384>)
 800440c:	fba3 2302 	umull	r2, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	461d      	mov	r5, r3
 800441a:	f04f 0600 	mov.w	r6, #0
 800441e:	46a9      	mov	r9, r5
 8004420:	46b2      	mov	sl, r6
 8004422:	eb19 0309 	adds.w	r3, r9, r9
 8004426:	eb4a 040a 	adc.w	r4, sl, sl
 800442a:	4699      	mov	r9, r3
 800442c:	46a2      	mov	sl, r4
 800442e:	eb19 0905 	adds.w	r9, r9, r5
 8004432:	eb4a 0a06 	adc.w	sl, sl, r6
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800444a:	4689      	mov	r9, r1
 800444c:	4692      	mov	sl, r2
 800444e:	eb19 0005 	adds.w	r0, r9, r5
 8004452:	eb4a 0106 	adc.w	r1, sl, r6
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	461d      	mov	r5, r3
 800445c:	f04f 0600 	mov.w	r6, #0
 8004460:	196b      	adds	r3, r5, r5
 8004462:	eb46 0406 	adc.w	r4, r6, r6
 8004466:	461a      	mov	r2, r3
 8004468:	4623      	mov	r3, r4
 800446a:	f7fc fbf5 	bl	8000c58 <__aeabi_uldivmod>
 800446e:	4603      	mov	r3, r0
 8004470:	460c      	mov	r4, r1
 8004472:	461a      	mov	r2, r3
 8004474:	4b2c      	ldr	r3, [pc, #176]	; (8004528 <UART_SetConfig+0x384>)
 8004476:	fba3 1302 	umull	r1, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2164      	movs	r1, #100	; 0x64
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <UART_SetConfig+0x384>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004496:	4498      	add	r8, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	461d      	mov	r5, r3
 800449c:	f04f 0600 	mov.w	r6, #0
 80044a0:	46a9      	mov	r9, r5
 80044a2:	46b2      	mov	sl, r6
 80044a4:	eb19 0309 	adds.w	r3, r9, r9
 80044a8:	eb4a 040a 	adc.w	r4, sl, sl
 80044ac:	4699      	mov	r9, r3
 80044ae:	46a2      	mov	sl, r4
 80044b0:	eb19 0905 	adds.w	r9, r9, r5
 80044b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044cc:	4689      	mov	r9, r1
 80044ce:	4692      	mov	sl, r2
 80044d0:	eb19 0005 	adds.w	r0, r9, r5
 80044d4:	eb4a 0106 	adc.w	r1, sl, r6
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	461d      	mov	r5, r3
 80044de:	f04f 0600 	mov.w	r6, #0
 80044e2:	196b      	adds	r3, r5, r5
 80044e4:	eb46 0406 	adc.w	r4, r6, r6
 80044e8:	461a      	mov	r2, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	f7fc fbb4 	bl	8000c58 <__aeabi_uldivmod>
 80044f0:	4603      	mov	r3, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <UART_SetConfig+0x384>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	; 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	3332      	adds	r3, #50	; 0x32
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <UART_SetConfig+0x384>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 0207 	and.w	r2, r3, #7
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4442      	add	r2, r8
 800451c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800451e:	e1b2      	b.n	8004886 <UART_SetConfig+0x6e2>
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4ad7      	ldr	r2, [pc, #860]	; (8004890 <UART_SetConfig+0x6ec>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d005      	beq.n	8004542 <UART_SetConfig+0x39e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4ad6      	ldr	r2, [pc, #856]	; (8004894 <UART_SetConfig+0x6f0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	f040 80d1 	bne.w	80046e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004542:	f7fe ff01 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 8004546:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	469a      	mov	sl, r3
 800454c:	f04f 0b00 	mov.w	fp, #0
 8004550:	46d0      	mov	r8, sl
 8004552:	46d9      	mov	r9, fp
 8004554:	eb18 0308 	adds.w	r3, r8, r8
 8004558:	eb49 0409 	adc.w	r4, r9, r9
 800455c:	4698      	mov	r8, r3
 800455e:	46a1      	mov	r9, r4
 8004560:	eb18 080a 	adds.w	r8, r8, sl
 8004564:	eb49 090b 	adc.w	r9, r9, fp
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004574:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004578:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800457c:	4688      	mov	r8, r1
 800457e:	4691      	mov	r9, r2
 8004580:	eb1a 0508 	adds.w	r5, sl, r8
 8004584:	eb4b 0609 	adc.w	r6, fp, r9
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4619      	mov	r1, r3
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	f04f 0400 	mov.w	r4, #0
 800459a:	0094      	lsls	r4, r2, #2
 800459c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045a0:	008b      	lsls	r3, r1, #2
 80045a2:	461a      	mov	r2, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	4628      	mov	r0, r5
 80045a8:	4631      	mov	r1, r6
 80045aa:	f7fc fb55 	bl	8000c58 <__aeabi_uldivmod>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	461a      	mov	r2, r3
 80045b4:	4bb8      	ldr	r3, [pc, #736]	; (8004898 <UART_SetConfig+0x6f4>)
 80045b6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	469b      	mov	fp, r3
 80045c4:	f04f 0c00 	mov.w	ip, #0
 80045c8:	46d9      	mov	r9, fp
 80045ca:	46e2      	mov	sl, ip
 80045cc:	eb19 0309 	adds.w	r3, r9, r9
 80045d0:	eb4a 040a 	adc.w	r4, sl, sl
 80045d4:	4699      	mov	r9, r3
 80045d6:	46a2      	mov	sl, r4
 80045d8:	eb19 090b 	adds.w	r9, r9, fp
 80045dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045f4:	4689      	mov	r9, r1
 80045f6:	4692      	mov	sl, r2
 80045f8:	eb1b 0509 	adds.w	r5, fp, r9
 80045fc:	eb4c 060a 	adc.w	r6, ip, sl
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4619      	mov	r1, r3
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	f04f 0400 	mov.w	r4, #0
 8004612:	0094      	lsls	r4, r2, #2
 8004614:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004618:	008b      	lsls	r3, r1, #2
 800461a:	461a      	mov	r2, r3
 800461c:	4623      	mov	r3, r4
 800461e:	4628      	mov	r0, r5
 8004620:	4631      	mov	r1, r6
 8004622:	f7fc fb19 	bl	8000c58 <__aeabi_uldivmod>
 8004626:	4603      	mov	r3, r0
 8004628:	460c      	mov	r4, r1
 800462a:	461a      	mov	r2, r3
 800462c:	4b9a      	ldr	r3, [pc, #616]	; (8004898 <UART_SetConfig+0x6f4>)
 800462e:	fba3 1302 	umull	r1, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2164      	movs	r1, #100	; 0x64
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	3332      	adds	r3, #50	; 0x32
 8004640:	4a95      	ldr	r2, [pc, #596]	; (8004898 <UART_SetConfig+0x6f4>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800464c:	4498      	add	r8, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	469b      	mov	fp, r3
 8004652:	f04f 0c00 	mov.w	ip, #0
 8004656:	46d9      	mov	r9, fp
 8004658:	46e2      	mov	sl, ip
 800465a:	eb19 0309 	adds.w	r3, r9, r9
 800465e:	eb4a 040a 	adc.w	r4, sl, sl
 8004662:	4699      	mov	r9, r3
 8004664:	46a2      	mov	sl, r4
 8004666:	eb19 090b 	adds.w	r9, r9, fp
 800466a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800467e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004682:	4689      	mov	r9, r1
 8004684:	4692      	mov	sl, r2
 8004686:	eb1b 0509 	adds.w	r5, fp, r9
 800468a:	eb4c 060a 	adc.w	r6, ip, sl
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4619      	mov	r1, r3
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	0094      	lsls	r4, r2, #2
 80046a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046a6:	008b      	lsls	r3, r1, #2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	4631      	mov	r1, r6
 80046b0:	f7fc fad2 	bl	8000c58 <__aeabi_uldivmod>
 80046b4:	4603      	mov	r3, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b77      	ldr	r3, [pc, #476]	; (8004898 <UART_SetConfig+0x6f4>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a72      	ldr	r2, [pc, #456]	; (8004898 <UART_SetConfig+0x6f4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4442      	add	r2, r8
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	e0d0      	b.n	8004886 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fe fe1c 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 80046e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	469a      	mov	sl, r3
 80046ee:	f04f 0b00 	mov.w	fp, #0
 80046f2:	46d0      	mov	r8, sl
 80046f4:	46d9      	mov	r9, fp
 80046f6:	eb18 0308 	adds.w	r3, r8, r8
 80046fa:	eb49 0409 	adc.w	r4, r9, r9
 80046fe:	4698      	mov	r8, r3
 8004700:	46a1      	mov	r9, r4
 8004702:	eb18 080a 	adds.w	r8, r8, sl
 8004706:	eb49 090b 	adc.w	r9, r9, fp
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004716:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800471a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800471e:	4688      	mov	r8, r1
 8004720:	4691      	mov	r9, r2
 8004722:	eb1a 0508 	adds.w	r5, sl, r8
 8004726:	eb4b 0609 	adc.w	r6, fp, r9
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	0094      	lsls	r4, r2, #2
 800473e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	461a      	mov	r2, r3
 8004746:	4623      	mov	r3, r4
 8004748:	4628      	mov	r0, r5
 800474a:	4631      	mov	r1, r6
 800474c:	f7fc fa84 	bl	8000c58 <__aeabi_uldivmod>
 8004750:	4603      	mov	r3, r0
 8004752:	460c      	mov	r4, r1
 8004754:	461a      	mov	r2, r3
 8004756:	4b50      	ldr	r3, [pc, #320]	; (8004898 <UART_SetConfig+0x6f4>)
 8004758:	fba3 2302 	umull	r2, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	469b      	mov	fp, r3
 8004766:	f04f 0c00 	mov.w	ip, #0
 800476a:	46d9      	mov	r9, fp
 800476c:	46e2      	mov	sl, ip
 800476e:	eb19 0309 	adds.w	r3, r9, r9
 8004772:	eb4a 040a 	adc.w	r4, sl, sl
 8004776:	4699      	mov	r9, r3
 8004778:	46a2      	mov	sl, r4
 800477a:	eb19 090b 	adds.w	r9, r9, fp
 800477e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004796:	4689      	mov	r9, r1
 8004798:	4692      	mov	sl, r2
 800479a:	eb1b 0509 	adds.w	r5, fp, r9
 800479e:	eb4c 060a 	adc.w	r6, ip, sl
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	0094      	lsls	r4, r2, #2
 80047b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047ba:	008b      	lsls	r3, r1, #2
 80047bc:	461a      	mov	r2, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	4631      	mov	r1, r6
 80047c4:	f7fc fa48 	bl	8000c58 <__aeabi_uldivmod>
 80047c8:	4603      	mov	r3, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b32      	ldr	r3, [pc, #200]	; (8004898 <UART_SetConfig+0x6f4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	; 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	3332      	adds	r3, #50	; 0x32
 80047e2:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <UART_SetConfig+0x6f4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ee:	4498      	add	r8, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	469b      	mov	fp, r3
 80047f4:	f04f 0c00 	mov.w	ip, #0
 80047f8:	46d9      	mov	r9, fp
 80047fa:	46e2      	mov	sl, ip
 80047fc:	eb19 0309 	adds.w	r3, r9, r9
 8004800:	eb4a 040a 	adc.w	r4, sl, sl
 8004804:	4699      	mov	r9, r3
 8004806:	46a2      	mov	sl, r4
 8004808:	eb19 090b 	adds.w	r9, r9, fp
 800480c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004824:	4689      	mov	r9, r1
 8004826:	4692      	mov	sl, r2
 8004828:	eb1b 0509 	adds.w	r5, fp, r9
 800482c:	eb4c 060a 	adc.w	r6, ip, sl
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4619      	mov	r1, r3
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	f04f 0400 	mov.w	r4, #0
 8004842:	0094      	lsls	r4, r2, #2
 8004844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004848:	008b      	lsls	r3, r1, #2
 800484a:	461a      	mov	r2, r3
 800484c:	4623      	mov	r3, r4
 800484e:	4628      	mov	r0, r5
 8004850:	4631      	mov	r1, r6
 8004852:	f7fc fa01 	bl	8000c58 <__aeabi_uldivmod>
 8004856:	4603      	mov	r3, r0
 8004858:	460c      	mov	r4, r1
 800485a:	461a      	mov	r2, r3
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <UART_SetConfig+0x6f4>)
 800485e:	fba3 1302 	umull	r1, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2164      	movs	r1, #100	; 0x64
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a09      	ldr	r2, [pc, #36]	; (8004898 <UART_SetConfig+0x6f4>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4442      	add	r2, r8
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	e7ff      	b.n	8004886 <UART_SetConfig+0x6e2>
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004890:	40011000 	.word	0x40011000
 8004894:	40011400 	.word	0x40011400
 8004898:	51eb851f 	.word	0x51eb851f

0800489c <__errno>:
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <__errno+0x8>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <__libc_init_array>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4e0d      	ldr	r6, [pc, #52]	; (80048e0 <__libc_init_array+0x38>)
 80048ac:	4c0d      	ldr	r4, [pc, #52]	; (80048e4 <__libc_init_array+0x3c>)
 80048ae:	1ba4      	subs	r4, r4, r6
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	2500      	movs	r5, #0
 80048b4:	42a5      	cmp	r5, r4
 80048b6:	d109      	bne.n	80048cc <__libc_init_array+0x24>
 80048b8:	4e0b      	ldr	r6, [pc, #44]	; (80048e8 <__libc_init_array+0x40>)
 80048ba:	4c0c      	ldr	r4, [pc, #48]	; (80048ec <__libc_init_array+0x44>)
 80048bc:	f002 f85c 	bl	8006978 <_init>
 80048c0:	1ba4      	subs	r4, r4, r6
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	2500      	movs	r5, #0
 80048c6:	42a5      	cmp	r5, r4
 80048c8:	d105      	bne.n	80048d6 <__libc_init_array+0x2e>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048d0:	4798      	blx	r3
 80048d2:	3501      	adds	r5, #1
 80048d4:	e7ee      	b.n	80048b4 <__libc_init_array+0xc>
 80048d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048da:	4798      	blx	r3
 80048dc:	3501      	adds	r5, #1
 80048de:	e7f2      	b.n	80048c6 <__libc_init_array+0x1e>
 80048e0:	08006c50 	.word	0x08006c50
 80048e4:	08006c50 	.word	0x08006c50
 80048e8:	08006c50 	.word	0x08006c50
 80048ec:	08006c54 	.word	0x08006c54

080048f0 <memset>:
 80048f0:	4402      	add	r2, r0
 80048f2:	4603      	mov	r3, r0
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d100      	bne.n	80048fa <memset+0xa>
 80048f8:	4770      	bx	lr
 80048fa:	f803 1b01 	strb.w	r1, [r3], #1
 80048fe:	e7f9      	b.n	80048f4 <memset+0x4>

08004900 <__cvt>:
 8004900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004904:	ec55 4b10 	vmov	r4, r5, d0
 8004908:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800490a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800490e:	2d00      	cmp	r5, #0
 8004910:	460e      	mov	r6, r1
 8004912:	4691      	mov	r9, r2
 8004914:	4619      	mov	r1, r3
 8004916:	bfb8      	it	lt
 8004918:	4622      	movlt	r2, r4
 800491a:	462b      	mov	r3, r5
 800491c:	f027 0720 	bic.w	r7, r7, #32
 8004920:	bfbb      	ittet	lt
 8004922:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004926:	461d      	movlt	r5, r3
 8004928:	2300      	movge	r3, #0
 800492a:	232d      	movlt	r3, #45	; 0x2d
 800492c:	bfb8      	it	lt
 800492e:	4614      	movlt	r4, r2
 8004930:	2f46      	cmp	r7, #70	; 0x46
 8004932:	700b      	strb	r3, [r1, #0]
 8004934:	d004      	beq.n	8004940 <__cvt+0x40>
 8004936:	2f45      	cmp	r7, #69	; 0x45
 8004938:	d100      	bne.n	800493c <__cvt+0x3c>
 800493a:	3601      	adds	r6, #1
 800493c:	2102      	movs	r1, #2
 800493e:	e000      	b.n	8004942 <__cvt+0x42>
 8004940:	2103      	movs	r1, #3
 8004942:	ab03      	add	r3, sp, #12
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	ab02      	add	r3, sp, #8
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4632      	mov	r2, r6
 800494c:	4653      	mov	r3, sl
 800494e:	ec45 4b10 	vmov	d0, r4, r5
 8004952:	f000 fcdd 	bl	8005310 <_dtoa_r>
 8004956:	2f47      	cmp	r7, #71	; 0x47
 8004958:	4680      	mov	r8, r0
 800495a:	d102      	bne.n	8004962 <__cvt+0x62>
 800495c:	f019 0f01 	tst.w	r9, #1
 8004960:	d026      	beq.n	80049b0 <__cvt+0xb0>
 8004962:	2f46      	cmp	r7, #70	; 0x46
 8004964:	eb08 0906 	add.w	r9, r8, r6
 8004968:	d111      	bne.n	800498e <__cvt+0x8e>
 800496a:	f898 3000 	ldrb.w	r3, [r8]
 800496e:	2b30      	cmp	r3, #48	; 0x30
 8004970:	d10a      	bne.n	8004988 <__cvt+0x88>
 8004972:	2200      	movs	r2, #0
 8004974:	2300      	movs	r3, #0
 8004976:	4620      	mov	r0, r4
 8004978:	4629      	mov	r1, r5
 800497a:	f7fc f8ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800497e:	b918      	cbnz	r0, 8004988 <__cvt+0x88>
 8004980:	f1c6 0601 	rsb	r6, r6, #1
 8004984:	f8ca 6000 	str.w	r6, [sl]
 8004988:	f8da 3000 	ldr.w	r3, [sl]
 800498c:	4499      	add	r9, r3
 800498e:	2200      	movs	r2, #0
 8004990:	2300      	movs	r3, #0
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fc f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800499a:	b938      	cbnz	r0, 80049ac <__cvt+0xac>
 800499c:	2230      	movs	r2, #48	; 0x30
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	454b      	cmp	r3, r9
 80049a2:	d205      	bcs.n	80049b0 <__cvt+0xb0>
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	9103      	str	r1, [sp, #12]
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e7f8      	b.n	800499e <__cvt+0x9e>
 80049ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b4:	eba3 0308 	sub.w	r3, r3, r8
 80049b8:	4640      	mov	r0, r8
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	b004      	add	sp, #16
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049c2 <__exponent>:
 80049c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c4:	2900      	cmp	r1, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	bfba      	itte	lt
 80049ca:	4249      	neglt	r1, r1
 80049cc:	232d      	movlt	r3, #45	; 0x2d
 80049ce:	232b      	movge	r3, #43	; 0x2b
 80049d0:	2909      	cmp	r1, #9
 80049d2:	f804 2b02 	strb.w	r2, [r4], #2
 80049d6:	7043      	strb	r3, [r0, #1]
 80049d8:	dd20      	ble.n	8004a1c <__exponent+0x5a>
 80049da:	f10d 0307 	add.w	r3, sp, #7
 80049de:	461f      	mov	r7, r3
 80049e0:	260a      	movs	r6, #10
 80049e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80049e6:	fb06 1115 	mls	r1, r6, r5, r1
 80049ea:	3130      	adds	r1, #48	; 0x30
 80049ec:	2d09      	cmp	r5, #9
 80049ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049f2:	f103 32ff 	add.w	r2, r3, #4294967295
 80049f6:	4629      	mov	r1, r5
 80049f8:	dc09      	bgt.n	8004a0e <__exponent+0x4c>
 80049fa:	3130      	adds	r1, #48	; 0x30
 80049fc:	3b02      	subs	r3, #2
 80049fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a02:	42bb      	cmp	r3, r7
 8004a04:	4622      	mov	r2, r4
 8004a06:	d304      	bcc.n	8004a12 <__exponent+0x50>
 8004a08:	1a10      	subs	r0, r2, r0
 8004a0a:	b003      	add	sp, #12
 8004a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a0e:	4613      	mov	r3, r2
 8004a10:	e7e7      	b.n	80049e2 <__exponent+0x20>
 8004a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a16:	f804 2b01 	strb.w	r2, [r4], #1
 8004a1a:	e7f2      	b.n	8004a02 <__exponent+0x40>
 8004a1c:	2330      	movs	r3, #48	; 0x30
 8004a1e:	4419      	add	r1, r3
 8004a20:	7083      	strb	r3, [r0, #2]
 8004a22:	1d02      	adds	r2, r0, #4
 8004a24:	70c1      	strb	r1, [r0, #3]
 8004a26:	e7ef      	b.n	8004a08 <__exponent+0x46>

08004a28 <_printf_float>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b08d      	sub	sp, #52	; 0x34
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004a34:	4616      	mov	r6, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	4605      	mov	r5, r0
 8004a3a:	f001 fa21 	bl	8005e80 <_localeconv_r>
 8004a3e:	6803      	ldr	r3, [r0, #0]
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fbcc 	bl	80001e0 <strlen>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a50:	9005      	str	r0, [sp, #20]
 8004a52:	3307      	adds	r3, #7
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	f103 0208 	add.w	r2, r3, #8
 8004a5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a60:	f8d4 b000 	ldr.w	fp, [r4]
 8004a64:	f8c8 2000 	str.w	r2, [r8]
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a70:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a78:	9307      	str	r3, [sp, #28]
 8004a7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a82:	4ba7      	ldr	r3, [pc, #668]	; (8004d20 <_printf_float+0x2f8>)
 8004a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a88:	f7fc f858 	bl	8000b3c <__aeabi_dcmpun>
 8004a8c:	bb70      	cbnz	r0, 8004aec <_printf_float+0xc4>
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a92:	4ba3      	ldr	r3, [pc, #652]	; (8004d20 <_printf_float+0x2f8>)
 8004a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a98:	f7fc f832 	bl	8000b00 <__aeabi_dcmple>
 8004a9c:	bb30      	cbnz	r0, 8004aec <_printf_float+0xc4>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	f7fc f821 	bl	8000aec <__aeabi_dcmplt>
 8004aaa:	b110      	cbz	r0, 8004ab2 <_printf_float+0x8a>
 8004aac:	232d      	movs	r3, #45	; 0x2d
 8004aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab2:	4a9c      	ldr	r2, [pc, #624]	; (8004d24 <_printf_float+0x2fc>)
 8004ab4:	4b9c      	ldr	r3, [pc, #624]	; (8004d28 <_printf_float+0x300>)
 8004ab6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004aba:	bf8c      	ite	hi
 8004abc:	4690      	movhi	r8, r2
 8004abe:	4698      	movls	r8, r3
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	f02b 0204 	bic.w	r2, fp, #4
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	6022      	str	r2, [r4, #0]
 8004aca:	f04f 0900 	mov.w	r9, #0
 8004ace:	9700      	str	r7, [sp, #0]
 8004ad0:	4633      	mov	r3, r6
 8004ad2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f9e6 	bl	8004ea8 <_printf_common>
 8004adc:	3001      	adds	r0, #1
 8004ade:	f040 808d 	bne.w	8004bfc <_printf_float+0x1d4>
 8004ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae6:	b00d      	add	sp, #52	; 0x34
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	4649      	mov	r1, r9
 8004af4:	f7fc f822 	bl	8000b3c <__aeabi_dcmpun>
 8004af8:	b110      	cbz	r0, 8004b00 <_printf_float+0xd8>
 8004afa:	4a8c      	ldr	r2, [pc, #560]	; (8004d2c <_printf_float+0x304>)
 8004afc:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <_printf_float+0x308>)
 8004afe:	e7da      	b.n	8004ab6 <_printf_float+0x8e>
 8004b00:	6861      	ldr	r1, [r4, #4]
 8004b02:	1c4b      	adds	r3, r1, #1
 8004b04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004b08:	a80a      	add	r0, sp, #40	; 0x28
 8004b0a:	d13e      	bne.n	8004b8a <_printf_float+0x162>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	6063      	str	r3, [r4, #4]
 8004b10:	2300      	movs	r3, #0
 8004b12:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b16:	ab09      	add	r3, sp, #36	; 0x24
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	ec49 8b10 	vmov	d0, r8, r9
 8004b1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	f8cd a004 	str.w	sl, [sp, #4]
 8004b28:	6861      	ldr	r1, [r4, #4]
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f7ff fee8 	bl	8004900 <__cvt>
 8004b30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004b34:	2b47      	cmp	r3, #71	; 0x47
 8004b36:	4680      	mov	r8, r0
 8004b38:	d109      	bne.n	8004b4e <_printf_float+0x126>
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	1cd8      	adds	r0, r3, #3
 8004b3e:	db02      	blt.n	8004b46 <_printf_float+0x11e>
 8004b40:	6862      	ldr	r2, [r4, #4]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	dd47      	ble.n	8004bd6 <_printf_float+0x1ae>
 8004b46:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b4a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b54:	d824      	bhi.n	8004ba0 <_printf_float+0x178>
 8004b56:	3901      	subs	r1, #1
 8004b58:	4652      	mov	r2, sl
 8004b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b5e:	9109      	str	r1, [sp, #36]	; 0x24
 8004b60:	f7ff ff2f 	bl	80049c2 <__exponent>
 8004b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b66:	1813      	adds	r3, r2, r0
 8004b68:	2a01      	cmp	r2, #1
 8004b6a:	4681      	mov	r9, r0
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	dc02      	bgt.n	8004b76 <_printf_float+0x14e>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	07d1      	lsls	r1, r2, #31
 8004b74:	d501      	bpl.n	8004b7a <_printf_float+0x152>
 8004b76:	3301      	adds	r3, #1
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0a5      	beq.n	8004ace <_printf_float+0xa6>
 8004b82:	232d      	movs	r3, #45	; 0x2d
 8004b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b88:	e7a1      	b.n	8004ace <_printf_float+0xa6>
 8004b8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004b8e:	f000 8177 	beq.w	8004e80 <_printf_float+0x458>
 8004b92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004b96:	d1bb      	bne.n	8004b10 <_printf_float+0xe8>
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d1b9      	bne.n	8004b10 <_printf_float+0xe8>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e7b6      	b.n	8004b0e <_printf_float+0xe6>
 8004ba0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004ba4:	d119      	bne.n	8004bda <_printf_float+0x1b2>
 8004ba6:	2900      	cmp	r1, #0
 8004ba8:	6863      	ldr	r3, [r4, #4]
 8004baa:	dd0c      	ble.n	8004bc6 <_printf_float+0x19e>
 8004bac:	6121      	str	r1, [r4, #16]
 8004bae:	b913      	cbnz	r3, 8004bb6 <_printf_float+0x18e>
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	07d2      	lsls	r2, r2, #31
 8004bb4:	d502      	bpl.n	8004bbc <_printf_float+0x194>
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	440b      	add	r3, r1
 8004bba:	6123      	str	r3, [r4, #16]
 8004bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8004bc0:	f04f 0900 	mov.w	r9, #0
 8004bc4:	e7d9      	b.n	8004b7a <_printf_float+0x152>
 8004bc6:	b913      	cbnz	r3, 8004bce <_printf_float+0x1a6>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	07d0      	lsls	r0, r2, #31
 8004bcc:	d501      	bpl.n	8004bd2 <_printf_float+0x1aa>
 8004bce:	3302      	adds	r3, #2
 8004bd0:	e7f3      	b.n	8004bba <_printf_float+0x192>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e7f1      	b.n	8004bba <_printf_float+0x192>
 8004bd6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004bda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bde:	4293      	cmp	r3, r2
 8004be0:	db05      	blt.n	8004bee <_printf_float+0x1c6>
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	6123      	str	r3, [r4, #16]
 8004be6:	07d1      	lsls	r1, r2, #31
 8004be8:	d5e8      	bpl.n	8004bbc <_printf_float+0x194>
 8004bea:	3301      	adds	r3, #1
 8004bec:	e7e5      	b.n	8004bba <_printf_float+0x192>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bfd4      	ite	le
 8004bf2:	f1c3 0302 	rsble	r3, r3, #2
 8004bf6:	2301      	movgt	r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	e7de      	b.n	8004bba <_printf_float+0x192>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	055a      	lsls	r2, r3, #21
 8004c00:	d407      	bmi.n	8004c12 <_printf_float+0x1ea>
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	4642      	mov	r2, r8
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d12b      	bne.n	8004c68 <_printf_float+0x240>
 8004c10:	e767      	b.n	8004ae2 <_printf_float+0xba>
 8004c12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c16:	f240 80dc 	bls.w	8004dd2 <_printf_float+0x3aa>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c22:	f7fb ff59 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d033      	beq.n	8004c92 <_printf_float+0x26a>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4a41      	ldr	r2, [pc, #260]	; (8004d34 <_printf_float+0x30c>)
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f af54 	beq.w	8004ae2 <_printf_float+0xba>
 8004c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	db02      	blt.n	8004c48 <_printf_float+0x220>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	07d8      	lsls	r0, r3, #31
 8004c46:	d50f      	bpl.n	8004c68 <_printf_float+0x240>
 8004c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af45 	beq.w	8004ae2 <_printf_float+0xba>
 8004c58:	f04f 0800 	mov.w	r8, #0
 8004c5c:	f104 091a 	add.w	r9, r4, #26
 8004c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4543      	cmp	r3, r8
 8004c66:	dc09      	bgt.n	8004c7c <_printf_float+0x254>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	f100 8103 	bmi.w	8004e76 <_printf_float+0x44e>
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c74:	4298      	cmp	r0, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4618      	movlt	r0, r3
 8004c7a:	e734      	b.n	8004ae6 <_printf_float+0xbe>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	464a      	mov	r2, r9
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af2b 	beq.w	8004ae2 <_printf_float+0xba>
 8004c8c:	f108 0801 	add.w	r8, r8, #1
 8004c90:	e7e6      	b.n	8004c60 <_printf_float+0x238>
 8004c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dc2b      	bgt.n	8004cf0 <_printf_float+0x2c8>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <_printf_float+0x30c>)
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f af1d 	beq.w	8004ae2 <_printf_float+0xba>
 8004ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004caa:	b923      	cbnz	r3, 8004cb6 <_printf_float+0x28e>
 8004cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cae:	b913      	cbnz	r3, 8004cb6 <_printf_float+0x28e>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	07d9      	lsls	r1, r3, #31
 8004cb4:	d5d8      	bpl.n	8004c68 <_printf_float+0x240>
 8004cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f af0e 	beq.w	8004ae2 <_printf_float+0xba>
 8004cc6:	f04f 0900 	mov.w	r9, #0
 8004cca:	f104 0a1a 	add.w	sl, r4, #26
 8004cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	454b      	cmp	r3, r9
 8004cd4:	dc01      	bgt.n	8004cda <_printf_float+0x2b2>
 8004cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd8:	e794      	b.n	8004c04 <_printf_float+0x1dc>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4652      	mov	r2, sl
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f43f aefc 	beq.w	8004ae2 <_printf_float+0xba>
 8004cea:	f109 0901 	add.w	r9, r9, #1
 8004cee:	e7ee      	b.n	8004cce <_printf_float+0x2a6>
 8004cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	bfa8      	it	ge
 8004cf8:	461a      	movge	r2, r3
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	4691      	mov	r9, r2
 8004cfe:	dd07      	ble.n	8004d10 <_printf_float+0x2e8>
 8004d00:	4613      	mov	r3, r2
 8004d02:	4631      	mov	r1, r6
 8004d04:	4642      	mov	r2, r8
 8004d06:	4628      	mov	r0, r5
 8004d08:	47b8      	blx	r7
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	f43f aee9 	beq.w	8004ae2 <_printf_float+0xba>
 8004d10:	f104 031a 	add.w	r3, r4, #26
 8004d14:	f04f 0b00 	mov.w	fp, #0
 8004d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d1c:	9306      	str	r3, [sp, #24]
 8004d1e:	e015      	b.n	8004d4c <_printf_float+0x324>
 8004d20:	7fefffff 	.word	0x7fefffff
 8004d24:	080069f0 	.word	0x080069f0
 8004d28:	080069ec 	.word	0x080069ec
 8004d2c:	080069f8 	.word	0x080069f8
 8004d30:	080069f4 	.word	0x080069f4
 8004d34:	080069fc 	.word	0x080069fc
 8004d38:	2301      	movs	r3, #1
 8004d3a:	9a06      	ldr	r2, [sp, #24]
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f aecd 	beq.w	8004ae2 <_printf_float+0xba>
 8004d48:	f10b 0b01 	add.w	fp, fp, #1
 8004d4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d50:	ebaa 0309 	sub.w	r3, sl, r9
 8004d54:	455b      	cmp	r3, fp
 8004d56:	dcef      	bgt.n	8004d38 <_printf_float+0x310>
 8004d58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	44d0      	add	r8, sl
 8004d60:	db15      	blt.n	8004d8e <_printf_float+0x366>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	07da      	lsls	r2, r3, #31
 8004d66:	d412      	bmi.n	8004d8e <_printf_float+0x366>
 8004d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d6c:	eba3 020a 	sub.w	r2, r3, sl
 8004d70:	eba3 0a01 	sub.w	sl, r3, r1
 8004d74:	4592      	cmp	sl, r2
 8004d76:	bfa8      	it	ge
 8004d78:	4692      	movge	sl, r2
 8004d7a:	f1ba 0f00 	cmp.w	sl, #0
 8004d7e:	dc0e      	bgt.n	8004d9e <_printf_float+0x376>
 8004d80:	f04f 0800 	mov.w	r8, #0
 8004d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d88:	f104 091a 	add.w	r9, r4, #26
 8004d8c:	e019      	b.n	8004dc2 <_printf_float+0x39a>
 8004d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d1e5      	bne.n	8004d68 <_printf_float+0x340>
 8004d9c:	e6a1      	b.n	8004ae2 <_printf_float+0xba>
 8004d9e:	4653      	mov	r3, sl
 8004da0:	4642      	mov	r2, r8
 8004da2:	4631      	mov	r1, r6
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b8      	blx	r7
 8004da8:	3001      	adds	r0, #1
 8004daa:	d1e9      	bne.n	8004d80 <_printf_float+0x358>
 8004dac:	e699      	b.n	8004ae2 <_printf_float+0xba>
 8004dae:	2301      	movs	r3, #1
 8004db0:	464a      	mov	r2, r9
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f ae92 	beq.w	8004ae2 <_printf_float+0xba>
 8004dbe:	f108 0801 	add.w	r8, r8, #1
 8004dc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	eba3 030a 	sub.w	r3, r3, sl
 8004dcc:	4543      	cmp	r3, r8
 8004dce:	dcee      	bgt.n	8004dae <_printf_float+0x386>
 8004dd0:	e74a      	b.n	8004c68 <_printf_float+0x240>
 8004dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd4:	2a01      	cmp	r2, #1
 8004dd6:	dc01      	bgt.n	8004ddc <_printf_float+0x3b4>
 8004dd8:	07db      	lsls	r3, r3, #31
 8004dda:	d53a      	bpl.n	8004e52 <_printf_float+0x42a>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4642      	mov	r2, r8
 8004de0:	4631      	mov	r1, r6
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b8      	blx	r7
 8004de6:	3001      	adds	r0, #1
 8004de8:	f43f ae7b 	beq.w	8004ae2 <_printf_float+0xba>
 8004dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	f108 0801 	add.w	r8, r8, #1
 8004dfc:	f43f ae71 	beq.w	8004ae2 <_printf_float+0xba>
 8004e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e02:	2200      	movs	r2, #0
 8004e04:	f103 3aff 	add.w	sl, r3, #4294967295
 8004e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f7fb fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e12:	b9c8      	cbnz	r0, 8004e48 <_printf_float+0x420>
 8004e14:	4653      	mov	r3, sl
 8004e16:	4642      	mov	r2, r8
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d10e      	bne.n	8004e40 <_printf_float+0x418>
 8004e22:	e65e      	b.n	8004ae2 <_printf_float+0xba>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4652      	mov	r2, sl
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f ae57 	beq.w	8004ae2 <_printf_float+0xba>
 8004e34:	f108 0801 	add.w	r8, r8, #1
 8004e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	4543      	cmp	r3, r8
 8004e3e:	dcf1      	bgt.n	8004e24 <_printf_float+0x3fc>
 8004e40:	464b      	mov	r3, r9
 8004e42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e46:	e6de      	b.n	8004c06 <_printf_float+0x1de>
 8004e48:	f04f 0800 	mov.w	r8, #0
 8004e4c:	f104 0a1a 	add.w	sl, r4, #26
 8004e50:	e7f2      	b.n	8004e38 <_printf_float+0x410>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e7df      	b.n	8004e16 <_printf_float+0x3ee>
 8004e56:	2301      	movs	r3, #1
 8004e58:	464a      	mov	r2, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae3e 	beq.w	8004ae2 <_printf_float+0xba>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	4543      	cmp	r3, r8
 8004e72:	dcf0      	bgt.n	8004e56 <_printf_float+0x42e>
 8004e74:	e6fc      	b.n	8004c70 <_printf_float+0x248>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0919 	add.w	r9, r4, #25
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x442>
 8004e80:	2900      	cmp	r1, #0
 8004e82:	f43f ae8b 	beq.w	8004b9c <_printf_float+0x174>
 8004e86:	2300      	movs	r3, #0
 8004e88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e8c:	ab09      	add	r3, sp, #36	; 0x24
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	ec49 8b10 	vmov	d0, r8, r9
 8004e94:	6022      	str	r2, [r4, #0]
 8004e96:	f8cd a004 	str.w	sl, [sp, #4]
 8004e9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7ff fd2e 	bl	8004900 <__cvt>
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	e648      	b.n	8004b3a <_printf_float+0x112>

08004ea8 <_printf_common>:
 8004ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eac:	4691      	mov	r9, r2
 8004eae:	461f      	mov	r7, r3
 8004eb0:	688a      	ldr	r2, [r1, #8]
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	bfb8      	it	lt
 8004ebc:	4613      	movlt	r3, r2
 8004ebe:	f8c9 3000 	str.w	r3, [r9]
 8004ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	b112      	cbz	r2, 8004ed2 <_printf_common+0x2a>
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f8c9 3000 	str.w	r3, [r9]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	0699      	lsls	r1, r3, #26
 8004ed6:	bf42      	ittt	mi
 8004ed8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004edc:	3302      	addmi	r3, #2
 8004ede:	f8c9 3000 	strmi.w	r3, [r9]
 8004ee2:	6825      	ldr	r5, [r4, #0]
 8004ee4:	f015 0506 	ands.w	r5, r5, #6
 8004ee8:	d107      	bne.n	8004efa <_printf_common+0x52>
 8004eea:	f104 0a19 	add.w	sl, r4, #25
 8004eee:	68e3      	ldr	r3, [r4, #12]
 8004ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	42ab      	cmp	r3, r5
 8004ef8:	dc28      	bgt.n	8004f4c <_printf_common+0xa4>
 8004efa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	3300      	adds	r3, #0
 8004f02:	bf18      	it	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	0692      	lsls	r2, r2, #26
 8004f08:	d42d      	bmi.n	8004f66 <_printf_common+0xbe>
 8004f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f0e:	4639      	mov	r1, r7
 8004f10:	4630      	mov	r0, r6
 8004f12:	47c0      	blx	r8
 8004f14:	3001      	adds	r0, #1
 8004f16:	d020      	beq.n	8004f5a <_printf_common+0xb2>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	68e5      	ldr	r5, [r4, #12]
 8004f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f20:	f003 0306 	and.w	r3, r3, #6
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	bf08      	it	eq
 8004f28:	1aad      	subeq	r5, r5, r2
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	6922      	ldr	r2, [r4, #16]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	341a      	adds	r4, #26
 8004f44:	454d      	cmp	r5, r9
 8004f46:	d11a      	bne.n	8004f7e <_printf_common+0xd6>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e008      	b.n	8004f5e <_printf_common+0xb6>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4652      	mov	r2, sl
 8004f50:	4639      	mov	r1, r7
 8004f52:	4630      	mov	r0, r6
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d103      	bne.n	8004f62 <_printf_common+0xba>
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f62:	3501      	adds	r5, #1
 8004f64:	e7c3      	b.n	8004eee <_printf_common+0x46>
 8004f66:	18e1      	adds	r1, r4, r3
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	2030      	movs	r0, #48	; 0x30
 8004f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f70:	4422      	add	r2, r4
 8004f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	e7c5      	b.n	8004f0a <_printf_common+0x62>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4622      	mov	r2, r4
 8004f82:	4639      	mov	r1, r7
 8004f84:	4630      	mov	r0, r6
 8004f86:	47c0      	blx	r8
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d0e6      	beq.n	8004f5a <_printf_common+0xb2>
 8004f8c:	f109 0901 	add.w	r9, r9, #1
 8004f90:	e7d8      	b.n	8004f44 <_printf_common+0x9c>
	...

08004f94 <_printf_i>:
 8004f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	7e09      	ldrb	r1, [r1, #24]
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	296e      	cmp	r1, #110	; 0x6e
 8004fa4:	4617      	mov	r7, r2
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	4698      	mov	r8, r3
 8004faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fac:	f000 80b3 	beq.w	8005116 <_printf_i+0x182>
 8004fb0:	d822      	bhi.n	8004ff8 <_printf_i+0x64>
 8004fb2:	2963      	cmp	r1, #99	; 0x63
 8004fb4:	d036      	beq.n	8005024 <_printf_i+0x90>
 8004fb6:	d80a      	bhi.n	8004fce <_printf_i+0x3a>
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	f000 80b9 	beq.w	8005130 <_printf_i+0x19c>
 8004fbe:	2958      	cmp	r1, #88	; 0x58
 8004fc0:	f000 8083 	beq.w	80050ca <_printf_i+0x136>
 8004fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fcc:	e032      	b.n	8005034 <_printf_i+0xa0>
 8004fce:	2964      	cmp	r1, #100	; 0x64
 8004fd0:	d001      	beq.n	8004fd6 <_printf_i+0x42>
 8004fd2:	2969      	cmp	r1, #105	; 0x69
 8004fd4:	d1f6      	bne.n	8004fc4 <_printf_i+0x30>
 8004fd6:	6820      	ldr	r0, [r4, #0]
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	0605      	lsls	r5, r0, #24
 8004fdc:	f103 0104 	add.w	r1, r3, #4
 8004fe0:	d52a      	bpl.n	8005038 <_printf_i+0xa4>
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da03      	bge.n	8004ff2 <_printf_i+0x5e>
 8004fea:	222d      	movs	r2, #45	; 0x2d
 8004fec:	425b      	negs	r3, r3
 8004fee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ff2:	486f      	ldr	r0, [pc, #444]	; (80051b0 <_printf_i+0x21c>)
 8004ff4:	220a      	movs	r2, #10
 8004ff6:	e039      	b.n	800506c <_printf_i+0xd8>
 8004ff8:	2973      	cmp	r1, #115	; 0x73
 8004ffa:	f000 809d 	beq.w	8005138 <_printf_i+0x1a4>
 8004ffe:	d808      	bhi.n	8005012 <_printf_i+0x7e>
 8005000:	296f      	cmp	r1, #111	; 0x6f
 8005002:	d020      	beq.n	8005046 <_printf_i+0xb2>
 8005004:	2970      	cmp	r1, #112	; 0x70
 8005006:	d1dd      	bne.n	8004fc4 <_printf_i+0x30>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	f043 0320 	orr.w	r3, r3, #32
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	e003      	b.n	800501a <_printf_i+0x86>
 8005012:	2975      	cmp	r1, #117	; 0x75
 8005014:	d017      	beq.n	8005046 <_printf_i+0xb2>
 8005016:	2978      	cmp	r1, #120	; 0x78
 8005018:	d1d4      	bne.n	8004fc4 <_printf_i+0x30>
 800501a:	2378      	movs	r3, #120	; 0x78
 800501c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005020:	4864      	ldr	r0, [pc, #400]	; (80051b4 <_printf_i+0x220>)
 8005022:	e055      	b.n	80050d0 <_printf_i+0x13c>
 8005024:	6813      	ldr	r3, [r2, #0]
 8005026:	1d19      	adds	r1, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6011      	str	r1, [r2, #0]
 800502c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005034:	2301      	movs	r3, #1
 8005036:	e08c      	b.n	8005152 <_printf_i+0x1be>
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6011      	str	r1, [r2, #0]
 800503c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005040:	bf18      	it	ne
 8005042:	b21b      	sxthne	r3, r3
 8005044:	e7cf      	b.n	8004fe6 <_printf_i+0x52>
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	6825      	ldr	r5, [r4, #0]
 800504a:	1d18      	adds	r0, r3, #4
 800504c:	6010      	str	r0, [r2, #0]
 800504e:	0628      	lsls	r0, r5, #24
 8005050:	d501      	bpl.n	8005056 <_printf_i+0xc2>
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	e002      	b.n	800505c <_printf_i+0xc8>
 8005056:	0668      	lsls	r0, r5, #25
 8005058:	d5fb      	bpl.n	8005052 <_printf_i+0xbe>
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	4854      	ldr	r0, [pc, #336]	; (80051b0 <_printf_i+0x21c>)
 800505e:	296f      	cmp	r1, #111	; 0x6f
 8005060:	bf14      	ite	ne
 8005062:	220a      	movne	r2, #10
 8005064:	2208      	moveq	r2, #8
 8005066:	2100      	movs	r1, #0
 8005068:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800506c:	6865      	ldr	r5, [r4, #4]
 800506e:	60a5      	str	r5, [r4, #8]
 8005070:	2d00      	cmp	r5, #0
 8005072:	f2c0 8095 	blt.w	80051a0 <_printf_i+0x20c>
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	f021 0104 	bic.w	r1, r1, #4
 800507c:	6021      	str	r1, [r4, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d13d      	bne.n	80050fe <_printf_i+0x16a>
 8005082:	2d00      	cmp	r5, #0
 8005084:	f040 808e 	bne.w	80051a4 <_printf_i+0x210>
 8005088:	4665      	mov	r5, ip
 800508a:	2a08      	cmp	r2, #8
 800508c:	d10b      	bne.n	80050a6 <_printf_i+0x112>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	07db      	lsls	r3, r3, #31
 8005092:	d508      	bpl.n	80050a6 <_printf_i+0x112>
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	bfde      	ittt	le
 800509c:	2330      	movle	r3, #48	; 0x30
 800509e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050a6:	ebac 0305 	sub.w	r3, ip, r5
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	f8cd 8000 	str.w	r8, [sp]
 80050b0:	463b      	mov	r3, r7
 80050b2:	aa03      	add	r2, sp, #12
 80050b4:	4621      	mov	r1, r4
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7ff fef6 	bl	8004ea8 <_printf_common>
 80050bc:	3001      	adds	r0, #1
 80050be:	d14d      	bne.n	800515c <_printf_i+0x1c8>
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	b005      	add	sp, #20
 80050c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050ca:	4839      	ldr	r0, [pc, #228]	; (80051b0 <_printf_i+0x21c>)
 80050cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	1d1d      	adds	r5, r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6015      	str	r5, [r2, #0]
 80050da:	060a      	lsls	r2, r1, #24
 80050dc:	d50b      	bpl.n	80050f6 <_printf_i+0x162>
 80050de:	07ca      	lsls	r2, r1, #31
 80050e0:	bf44      	itt	mi
 80050e2:	f041 0120 	orrmi.w	r1, r1, #32
 80050e6:	6021      	strmi	r1, [r4, #0]
 80050e8:	b91b      	cbnz	r3, 80050f2 <_printf_i+0x15e>
 80050ea:	6822      	ldr	r2, [r4, #0]
 80050ec:	f022 0220 	bic.w	r2, r2, #32
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	2210      	movs	r2, #16
 80050f4:	e7b7      	b.n	8005066 <_printf_i+0xd2>
 80050f6:	064d      	lsls	r5, r1, #25
 80050f8:	bf48      	it	mi
 80050fa:	b29b      	uxthmi	r3, r3
 80050fc:	e7ef      	b.n	80050de <_printf_i+0x14a>
 80050fe:	4665      	mov	r5, ip
 8005100:	fbb3 f1f2 	udiv	r1, r3, r2
 8005104:	fb02 3311 	mls	r3, r2, r1, r3
 8005108:	5cc3      	ldrb	r3, [r0, r3]
 800510a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800510e:	460b      	mov	r3, r1
 8005110:	2900      	cmp	r1, #0
 8005112:	d1f5      	bne.n	8005100 <_printf_i+0x16c>
 8005114:	e7b9      	b.n	800508a <_printf_i+0xf6>
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	6825      	ldr	r5, [r4, #0]
 800511a:	6961      	ldr	r1, [r4, #20]
 800511c:	1d18      	adds	r0, r3, #4
 800511e:	6010      	str	r0, [r2, #0]
 8005120:	0628      	lsls	r0, r5, #24
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	d501      	bpl.n	800512a <_printf_i+0x196>
 8005126:	6019      	str	r1, [r3, #0]
 8005128:	e002      	b.n	8005130 <_printf_i+0x19c>
 800512a:	066a      	lsls	r2, r5, #25
 800512c:	d5fb      	bpl.n	8005126 <_printf_i+0x192>
 800512e:	8019      	strh	r1, [r3, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	4665      	mov	r5, ip
 8005136:	e7b9      	b.n	80050ac <_printf_i+0x118>
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	1d19      	adds	r1, r3, #4
 800513c:	6011      	str	r1, [r2, #0]
 800513e:	681d      	ldr	r5, [r3, #0]
 8005140:	6862      	ldr	r2, [r4, #4]
 8005142:	2100      	movs	r1, #0
 8005144:	4628      	mov	r0, r5
 8005146:	f7fb f853 	bl	80001f0 <memchr>
 800514a:	b108      	cbz	r0, 8005150 <_printf_i+0x1bc>
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	6060      	str	r0, [r4, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515a:	e7a7      	b.n	80050ac <_printf_i+0x118>
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	462a      	mov	r2, r5
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	47c0      	blx	r8
 8005166:	3001      	adds	r0, #1
 8005168:	d0aa      	beq.n	80050c0 <_printf_i+0x12c>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	079b      	lsls	r3, r3, #30
 800516e:	d413      	bmi.n	8005198 <_printf_i+0x204>
 8005170:	68e0      	ldr	r0, [r4, #12]
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	4298      	cmp	r0, r3
 8005176:	bfb8      	it	lt
 8005178:	4618      	movlt	r0, r3
 800517a:	e7a3      	b.n	80050c4 <_printf_i+0x130>
 800517c:	2301      	movs	r3, #1
 800517e:	464a      	mov	r2, r9
 8005180:	4639      	mov	r1, r7
 8005182:	4630      	mov	r0, r6
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d09a      	beq.n	80050c0 <_printf_i+0x12c>
 800518a:	3501      	adds	r5, #1
 800518c:	68e3      	ldr	r3, [r4, #12]
 800518e:	9a03      	ldr	r2, [sp, #12]
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	42ab      	cmp	r3, r5
 8005194:	dcf2      	bgt.n	800517c <_printf_i+0x1e8>
 8005196:	e7eb      	b.n	8005170 <_printf_i+0x1dc>
 8005198:	2500      	movs	r5, #0
 800519a:	f104 0919 	add.w	r9, r4, #25
 800519e:	e7f5      	b.n	800518c <_printf_i+0x1f8>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1ac      	bne.n	80050fe <_printf_i+0x16a>
 80051a4:	7803      	ldrb	r3, [r0, #0]
 80051a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ae:	e76c      	b.n	800508a <_printf_i+0xf6>
 80051b0:	080069fe 	.word	0x080069fe
 80051b4:	08006a0f 	.word	0x08006a0f

080051b8 <siprintf>:
 80051b8:	b40e      	push	{r1, r2, r3}
 80051ba:	b500      	push	{lr}
 80051bc:	b09c      	sub	sp, #112	; 0x70
 80051be:	ab1d      	add	r3, sp, #116	; 0x74
 80051c0:	9002      	str	r0, [sp, #8]
 80051c2:	9006      	str	r0, [sp, #24]
 80051c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051c8:	4809      	ldr	r0, [pc, #36]	; (80051f0 <siprintf+0x38>)
 80051ca:	9107      	str	r1, [sp, #28]
 80051cc:	9104      	str	r1, [sp, #16]
 80051ce:	4909      	ldr	r1, [pc, #36]	; (80051f4 <siprintf+0x3c>)
 80051d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d4:	9105      	str	r1, [sp, #20]
 80051d6:	6800      	ldr	r0, [r0, #0]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	a902      	add	r1, sp, #8
 80051dc:	f001 fa5c 	bl	8006698 <_svfiprintf_r>
 80051e0:	9b02      	ldr	r3, [sp, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	b01c      	add	sp, #112	; 0x70
 80051e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051ec:	b003      	add	sp, #12
 80051ee:	4770      	bx	lr
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	ffff0208 	.word	0xffff0208

080051f8 <quorem>:
 80051f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	6903      	ldr	r3, [r0, #16]
 80051fe:	690c      	ldr	r4, [r1, #16]
 8005200:	42a3      	cmp	r3, r4
 8005202:	4680      	mov	r8, r0
 8005204:	f2c0 8082 	blt.w	800530c <quorem+0x114>
 8005208:	3c01      	subs	r4, #1
 800520a:	f101 0714 	add.w	r7, r1, #20
 800520e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005212:	f100 0614 	add.w	r6, r0, #20
 8005216:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800521a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800521e:	eb06 030c 	add.w	r3, r6, ip
 8005222:	3501      	adds	r5, #1
 8005224:	eb07 090c 	add.w	r9, r7, ip
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	fbb0 f5f5 	udiv	r5, r0, r5
 800522e:	b395      	cbz	r5, 8005296 <quorem+0x9e>
 8005230:	f04f 0a00 	mov.w	sl, #0
 8005234:	4638      	mov	r0, r7
 8005236:	46b6      	mov	lr, r6
 8005238:	46d3      	mov	fp, sl
 800523a:	f850 2b04 	ldr.w	r2, [r0], #4
 800523e:	b293      	uxth	r3, r2
 8005240:	fb05 a303 	mla	r3, r5, r3, sl
 8005244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005248:	b29b      	uxth	r3, r3
 800524a:	ebab 0303 	sub.w	r3, fp, r3
 800524e:	0c12      	lsrs	r2, r2, #16
 8005250:	f8de b000 	ldr.w	fp, [lr]
 8005254:	fb05 a202 	mla	r2, r5, r2, sl
 8005258:	fa13 f38b 	uxtah	r3, r3, fp
 800525c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005260:	fa1f fb82 	uxth.w	fp, r2
 8005264:	f8de 2000 	ldr.w	r2, [lr]
 8005268:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800526c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005270:	b29b      	uxth	r3, r3
 8005272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005276:	4581      	cmp	r9, r0
 8005278:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800527c:	f84e 3b04 	str.w	r3, [lr], #4
 8005280:	d2db      	bcs.n	800523a <quorem+0x42>
 8005282:	f856 300c 	ldr.w	r3, [r6, ip]
 8005286:	b933      	cbnz	r3, 8005296 <quorem+0x9e>
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	3b04      	subs	r3, #4
 800528c:	429e      	cmp	r6, r3
 800528e:	461a      	mov	r2, r3
 8005290:	d330      	bcc.n	80052f4 <quorem+0xfc>
 8005292:	f8c8 4010 	str.w	r4, [r8, #16]
 8005296:	4640      	mov	r0, r8
 8005298:	f001 f828 	bl	80062ec <__mcmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	db25      	blt.n	80052ec <quorem+0xf4>
 80052a0:	3501      	adds	r5, #1
 80052a2:	4630      	mov	r0, r6
 80052a4:	f04f 0c00 	mov.w	ip, #0
 80052a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80052ac:	f8d0 e000 	ldr.w	lr, [r0]
 80052b0:	b293      	uxth	r3, r2
 80052b2:	ebac 0303 	sub.w	r3, ip, r3
 80052b6:	0c12      	lsrs	r2, r2, #16
 80052b8:	fa13 f38e 	uxtah	r3, r3, lr
 80052bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ca:	45b9      	cmp	r9, r7
 80052cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052d0:	f840 3b04 	str.w	r3, [r0], #4
 80052d4:	d2e8      	bcs.n	80052a8 <quorem+0xb0>
 80052d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80052da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80052de:	b92a      	cbnz	r2, 80052ec <quorem+0xf4>
 80052e0:	3b04      	subs	r3, #4
 80052e2:	429e      	cmp	r6, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	d30b      	bcc.n	8005300 <quorem+0x108>
 80052e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80052ec:	4628      	mov	r0, r5
 80052ee:	b003      	add	sp, #12
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	3b04      	subs	r3, #4
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	d1ca      	bne.n	8005292 <quorem+0x9a>
 80052fc:	3c01      	subs	r4, #1
 80052fe:	e7c5      	b.n	800528c <quorem+0x94>
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	3b04      	subs	r3, #4
 8005304:	2a00      	cmp	r2, #0
 8005306:	d1ef      	bne.n	80052e8 <quorem+0xf0>
 8005308:	3c01      	subs	r4, #1
 800530a:	e7ea      	b.n	80052e2 <quorem+0xea>
 800530c:	2000      	movs	r0, #0
 800530e:	e7ee      	b.n	80052ee <quorem+0xf6>

08005310 <_dtoa_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	ec57 6b10 	vmov	r6, r7, d0
 8005318:	b097      	sub	sp, #92	; 0x5c
 800531a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800531c:	9106      	str	r1, [sp, #24]
 800531e:	4604      	mov	r4, r0
 8005320:	920b      	str	r2, [sp, #44]	; 0x2c
 8005322:	9312      	str	r3, [sp, #72]	; 0x48
 8005324:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005328:	e9cd 6700 	strd	r6, r7, [sp]
 800532c:	b93d      	cbnz	r5, 800533e <_dtoa_r+0x2e>
 800532e:	2010      	movs	r0, #16
 8005330:	f000 fdb4 	bl	8005e9c <malloc>
 8005334:	6260      	str	r0, [r4, #36]	; 0x24
 8005336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800533a:	6005      	str	r5, [r0, #0]
 800533c:	60c5      	str	r5, [r0, #12]
 800533e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005340:	6819      	ldr	r1, [r3, #0]
 8005342:	b151      	cbz	r1, 800535a <_dtoa_r+0x4a>
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	604a      	str	r2, [r1, #4]
 8005348:	2301      	movs	r3, #1
 800534a:	4093      	lsls	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fdeb 	bl	8005f2a <_Bfree>
 8005354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	1e3b      	subs	r3, r7, #0
 800535c:	bfbb      	ittet	lt
 800535e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005362:	9301      	strlt	r3, [sp, #4]
 8005364:	2300      	movge	r3, #0
 8005366:	2201      	movlt	r2, #1
 8005368:	bfac      	ite	ge
 800536a:	f8c8 3000 	strge.w	r3, [r8]
 800536e:	f8c8 2000 	strlt.w	r2, [r8]
 8005372:	4baf      	ldr	r3, [pc, #700]	; (8005630 <_dtoa_r+0x320>)
 8005374:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005378:	ea33 0308 	bics.w	r3, r3, r8
 800537c:	d114      	bne.n	80053a8 <_dtoa_r+0x98>
 800537e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005380:	f242 730f 	movw	r3, #9999	; 0x270f
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	b923      	cbnz	r3, 8005394 <_dtoa_r+0x84>
 800538a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800538e:	2800      	cmp	r0, #0
 8005390:	f000 8542 	beq.w	8005e18 <_dtoa_r+0xb08>
 8005394:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005396:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005644 <_dtoa_r+0x334>
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8544 	beq.w	8005e28 <_dtoa_r+0xb18>
 80053a0:	f10b 0303 	add.w	r3, fp, #3
 80053a4:	f000 bd3e 	b.w	8005e24 <_dtoa_r+0xb14>
 80053a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2300      	movs	r3, #0
 80053b0:	4630      	mov	r0, r6
 80053b2:	4639      	mov	r1, r7
 80053b4:	f7fb fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80053b8:	4681      	mov	r9, r0
 80053ba:	b168      	cbz	r0, 80053d8 <_dtoa_r+0xc8>
 80053bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053be:	2301      	movs	r3, #1
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8524 	beq.w	8005e12 <_dtoa_r+0xb02>
 80053ca:	4b9a      	ldr	r3, [pc, #616]	; (8005634 <_dtoa_r+0x324>)
 80053cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	f000 bd28 	b.w	8005e28 <_dtoa_r+0xb18>
 80053d8:	aa14      	add	r2, sp, #80	; 0x50
 80053da:	a915      	add	r1, sp, #84	; 0x54
 80053dc:	ec47 6b10 	vmov	d0, r6, r7
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 fffa 	bl	80063da <__d2b>
 80053e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80053ea:	9004      	str	r0, [sp, #16]
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	d07c      	beq.n	80054ea <_dtoa_r+0x1da>
 80053f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80053f8:	46b2      	mov	sl, r6
 80053fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80053fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005402:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005406:	2200      	movs	r2, #0
 8005408:	4b8b      	ldr	r3, [pc, #556]	; (8005638 <_dtoa_r+0x328>)
 800540a:	4650      	mov	r0, sl
 800540c:	4659      	mov	r1, fp
 800540e:	f7fa ff43 	bl	8000298 <__aeabi_dsub>
 8005412:	a381      	add	r3, pc, #516	; (adr r3, 8005618 <_dtoa_r+0x308>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fb f8f6 	bl	8000608 <__aeabi_dmul>
 800541c:	a380      	add	r3, pc, #512	; (adr r3, 8005620 <_dtoa_r+0x310>)
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f7fa ff3b 	bl	800029c <__adddf3>
 8005426:	4606      	mov	r6, r0
 8005428:	4628      	mov	r0, r5
 800542a:	460f      	mov	r7, r1
 800542c:	f7fb f882 	bl	8000534 <__aeabi_i2d>
 8005430:	a37d      	add	r3, pc, #500	; (adr r3, 8005628 <_dtoa_r+0x318>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f7fb f8e7 	bl	8000608 <__aeabi_dmul>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4630      	mov	r0, r6
 8005440:	4639      	mov	r1, r7
 8005442:	f7fa ff2b 	bl	800029c <__adddf3>
 8005446:	4606      	mov	r6, r0
 8005448:	460f      	mov	r7, r1
 800544a:	f7fb fb8d 	bl	8000b68 <__aeabi_d2iz>
 800544e:	2200      	movs	r2, #0
 8005450:	4682      	mov	sl, r0
 8005452:	2300      	movs	r3, #0
 8005454:	4630      	mov	r0, r6
 8005456:	4639      	mov	r1, r7
 8005458:	f7fb fb48 	bl	8000aec <__aeabi_dcmplt>
 800545c:	b148      	cbz	r0, 8005472 <_dtoa_r+0x162>
 800545e:	4650      	mov	r0, sl
 8005460:	f7fb f868 	bl	8000534 <__aeabi_i2d>
 8005464:	4632      	mov	r2, r6
 8005466:	463b      	mov	r3, r7
 8005468:	f7fb fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800546c:	b908      	cbnz	r0, 8005472 <_dtoa_r+0x162>
 800546e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005472:	f1ba 0f16 	cmp.w	sl, #22
 8005476:	d859      	bhi.n	800552c <_dtoa_r+0x21c>
 8005478:	4970      	ldr	r1, [pc, #448]	; (800563c <_dtoa_r+0x32c>)
 800547a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800547e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005486:	f7fb fb4f 	bl	8000b28 <__aeabi_dcmpgt>
 800548a:	2800      	cmp	r0, #0
 800548c:	d050      	beq.n	8005530 <_dtoa_r+0x220>
 800548e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005492:	2300      	movs	r3, #0
 8005494:	930f      	str	r3, [sp, #60]	; 0x3c
 8005496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005498:	1b5d      	subs	r5, r3, r5
 800549a:	f1b5 0801 	subs.w	r8, r5, #1
 800549e:	bf49      	itett	mi
 80054a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80054a4:	2300      	movpl	r3, #0
 80054a6:	9305      	strmi	r3, [sp, #20]
 80054a8:	f04f 0800 	movmi.w	r8, #0
 80054ac:	bf58      	it	pl
 80054ae:	9305      	strpl	r3, [sp, #20]
 80054b0:	f1ba 0f00 	cmp.w	sl, #0
 80054b4:	db3e      	blt.n	8005534 <_dtoa_r+0x224>
 80054b6:	2300      	movs	r3, #0
 80054b8:	44d0      	add	r8, sl
 80054ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80054be:	9307      	str	r3, [sp, #28]
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	f200 8090 	bhi.w	80055e8 <_dtoa_r+0x2d8>
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	bfc4      	itt	gt
 80054cc:	3b04      	subgt	r3, #4
 80054ce:	9306      	strgt	r3, [sp, #24]
 80054d0:	9b06      	ldr	r3, [sp, #24]
 80054d2:	f1a3 0302 	sub.w	r3, r3, #2
 80054d6:	bfcc      	ite	gt
 80054d8:	2500      	movgt	r5, #0
 80054da:	2501      	movle	r5, #1
 80054dc:	2b03      	cmp	r3, #3
 80054de:	f200 808f 	bhi.w	8005600 <_dtoa_r+0x2f0>
 80054e2:	e8df f003 	tbb	[pc, r3]
 80054e6:	7f7d      	.short	0x7f7d
 80054e8:	7131      	.short	0x7131
 80054ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80054ee:	441d      	add	r5, r3
 80054f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80054f4:	2820      	cmp	r0, #32
 80054f6:	dd13      	ble.n	8005520 <_dtoa_r+0x210>
 80054f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80054fc:	9b00      	ldr	r3, [sp, #0]
 80054fe:	fa08 f800 	lsl.w	r8, r8, r0
 8005502:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005506:	fa23 f000 	lsr.w	r0, r3, r0
 800550a:	ea48 0000 	orr.w	r0, r8, r0
 800550e:	f7fb f801 	bl	8000514 <__aeabi_ui2d>
 8005512:	2301      	movs	r3, #1
 8005514:	4682      	mov	sl, r0
 8005516:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800551a:	3d01      	subs	r5, #1
 800551c:	9313      	str	r3, [sp, #76]	; 0x4c
 800551e:	e772      	b.n	8005406 <_dtoa_r+0xf6>
 8005520:	9b00      	ldr	r3, [sp, #0]
 8005522:	f1c0 0020 	rsb	r0, r0, #32
 8005526:	fa03 f000 	lsl.w	r0, r3, r0
 800552a:	e7f0      	b.n	800550e <_dtoa_r+0x1fe>
 800552c:	2301      	movs	r3, #1
 800552e:	e7b1      	b.n	8005494 <_dtoa_r+0x184>
 8005530:	900f      	str	r0, [sp, #60]	; 0x3c
 8005532:	e7b0      	b.n	8005496 <_dtoa_r+0x186>
 8005534:	9b05      	ldr	r3, [sp, #20]
 8005536:	eba3 030a 	sub.w	r3, r3, sl
 800553a:	9305      	str	r3, [sp, #20]
 800553c:	f1ca 0300 	rsb	r3, sl, #0
 8005540:	9307      	str	r3, [sp, #28]
 8005542:	2300      	movs	r3, #0
 8005544:	930e      	str	r3, [sp, #56]	; 0x38
 8005546:	e7bb      	b.n	80054c0 <_dtoa_r+0x1b0>
 8005548:	2301      	movs	r3, #1
 800554a:	930a      	str	r3, [sp, #40]	; 0x28
 800554c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	dd59      	ble.n	8005606 <_dtoa_r+0x2f6>
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	4699      	mov	r9, r3
 8005556:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005558:	2200      	movs	r2, #0
 800555a:	6072      	str	r2, [r6, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	f102 0014 	add.w	r0, r2, #20
 8005562:	4298      	cmp	r0, r3
 8005564:	6871      	ldr	r1, [r6, #4]
 8005566:	d953      	bls.n	8005610 <_dtoa_r+0x300>
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fcaa 	bl	8005ec2 <_Balloc>
 800556e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005570:	6030      	str	r0, [r6, #0]
 8005572:	f1b9 0f0e 	cmp.w	r9, #14
 8005576:	f8d3 b000 	ldr.w	fp, [r3]
 800557a:	f200 80e6 	bhi.w	800574a <_dtoa_r+0x43a>
 800557e:	2d00      	cmp	r5, #0
 8005580:	f000 80e3 	beq.w	800574a <_dtoa_r+0x43a>
 8005584:	ed9d 7b00 	vldr	d7, [sp]
 8005588:	f1ba 0f00 	cmp.w	sl, #0
 800558c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005590:	dd74      	ble.n	800567c <_dtoa_r+0x36c>
 8005592:	4a2a      	ldr	r2, [pc, #168]	; (800563c <_dtoa_r+0x32c>)
 8005594:	f00a 030f 	and.w	r3, sl, #15
 8005598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800559c:	ed93 7b00 	vldr	d7, [r3]
 80055a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055a4:	06f0      	lsls	r0, r6, #27
 80055a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80055aa:	d565      	bpl.n	8005678 <_dtoa_r+0x368>
 80055ac:	4b24      	ldr	r3, [pc, #144]	; (8005640 <_dtoa_r+0x330>)
 80055ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055b6:	f7fb f951 	bl	800085c <__aeabi_ddiv>
 80055ba:	e9cd 0100 	strd	r0, r1, [sp]
 80055be:	f006 060f 	and.w	r6, r6, #15
 80055c2:	2503      	movs	r5, #3
 80055c4:	4f1e      	ldr	r7, [pc, #120]	; (8005640 <_dtoa_r+0x330>)
 80055c6:	e04c      	b.n	8005662 <_dtoa_r+0x352>
 80055c8:	2301      	movs	r3, #1
 80055ca:	930a      	str	r3, [sp, #40]	; 0x28
 80055cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ce:	4453      	add	r3, sl
 80055d0:	f103 0901 	add.w	r9, r3, #1
 80055d4:	9302      	str	r3, [sp, #8]
 80055d6:	464b      	mov	r3, r9
 80055d8:	2b01      	cmp	r3, #1
 80055da:	bfb8      	it	lt
 80055dc:	2301      	movlt	r3, #1
 80055de:	e7ba      	b.n	8005556 <_dtoa_r+0x246>
 80055e0:	2300      	movs	r3, #0
 80055e2:	e7b2      	b.n	800554a <_dtoa_r+0x23a>
 80055e4:	2300      	movs	r3, #0
 80055e6:	e7f0      	b.n	80055ca <_dtoa_r+0x2ba>
 80055e8:	2501      	movs	r5, #1
 80055ea:	2300      	movs	r3, #0
 80055ec:	9306      	str	r3, [sp, #24]
 80055ee:	950a      	str	r5, [sp, #40]	; 0x28
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	9302      	str	r3, [sp, #8]
 80055f6:	4699      	mov	r9, r3
 80055f8:	2200      	movs	r2, #0
 80055fa:	2312      	movs	r3, #18
 80055fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80055fe:	e7aa      	b.n	8005556 <_dtoa_r+0x246>
 8005600:	2301      	movs	r3, #1
 8005602:	930a      	str	r3, [sp, #40]	; 0x28
 8005604:	e7f4      	b.n	80055f0 <_dtoa_r+0x2e0>
 8005606:	2301      	movs	r3, #1
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	4699      	mov	r9, r3
 800560c:	461a      	mov	r2, r3
 800560e:	e7f5      	b.n	80055fc <_dtoa_r+0x2ec>
 8005610:	3101      	adds	r1, #1
 8005612:	6071      	str	r1, [r6, #4]
 8005614:	0052      	lsls	r2, r2, #1
 8005616:	e7a2      	b.n	800555e <_dtoa_r+0x24e>
 8005618:	636f4361 	.word	0x636f4361
 800561c:	3fd287a7 	.word	0x3fd287a7
 8005620:	8b60c8b3 	.word	0x8b60c8b3
 8005624:	3fc68a28 	.word	0x3fc68a28
 8005628:	509f79fb 	.word	0x509f79fb
 800562c:	3fd34413 	.word	0x3fd34413
 8005630:	7ff00000 	.word	0x7ff00000
 8005634:	080069fd 	.word	0x080069fd
 8005638:	3ff80000 	.word	0x3ff80000
 800563c:	08006a58 	.word	0x08006a58
 8005640:	08006a30 	.word	0x08006a30
 8005644:	08006a29 	.word	0x08006a29
 8005648:	07f1      	lsls	r1, r6, #31
 800564a:	d508      	bpl.n	800565e <_dtoa_r+0x34e>
 800564c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005654:	f7fa ffd8 	bl	8000608 <__aeabi_dmul>
 8005658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800565c:	3501      	adds	r5, #1
 800565e:	1076      	asrs	r6, r6, #1
 8005660:	3708      	adds	r7, #8
 8005662:	2e00      	cmp	r6, #0
 8005664:	d1f0      	bne.n	8005648 <_dtoa_r+0x338>
 8005666:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800566a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800566e:	f7fb f8f5 	bl	800085c <__aeabi_ddiv>
 8005672:	e9cd 0100 	strd	r0, r1, [sp]
 8005676:	e01a      	b.n	80056ae <_dtoa_r+0x39e>
 8005678:	2502      	movs	r5, #2
 800567a:	e7a3      	b.n	80055c4 <_dtoa_r+0x2b4>
 800567c:	f000 80a0 	beq.w	80057c0 <_dtoa_r+0x4b0>
 8005680:	f1ca 0600 	rsb	r6, sl, #0
 8005684:	4b9f      	ldr	r3, [pc, #636]	; (8005904 <_dtoa_r+0x5f4>)
 8005686:	4fa0      	ldr	r7, [pc, #640]	; (8005908 <_dtoa_r+0x5f8>)
 8005688:	f006 020f 	and.w	r2, r6, #15
 800568c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005698:	f7fa ffb6 	bl	8000608 <__aeabi_dmul>
 800569c:	e9cd 0100 	strd	r0, r1, [sp]
 80056a0:	1136      	asrs	r6, r6, #4
 80056a2:	2300      	movs	r3, #0
 80056a4:	2502      	movs	r5, #2
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d17f      	bne.n	80057aa <_dtoa_r+0x49a>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e1      	bne.n	8005672 <_dtoa_r+0x362>
 80056ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8087 	beq.w	80057c4 <_dtoa_r+0x4b4>
 80056b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056ba:	2200      	movs	r2, #0
 80056bc:	4b93      	ldr	r3, [pc, #588]	; (800590c <_dtoa_r+0x5fc>)
 80056be:	4630      	mov	r0, r6
 80056c0:	4639      	mov	r1, r7
 80056c2:	f7fb fa13 	bl	8000aec <__aeabi_dcmplt>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d07c      	beq.n	80057c4 <_dtoa_r+0x4b4>
 80056ca:	f1b9 0f00 	cmp.w	r9, #0
 80056ce:	d079      	beq.n	80057c4 <_dtoa_r+0x4b4>
 80056d0:	9b02      	ldr	r3, [sp, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dd35      	ble.n	8005742 <_dtoa_r+0x432>
 80056d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056da:	9308      	str	r3, [sp, #32]
 80056dc:	4639      	mov	r1, r7
 80056de:	2200      	movs	r2, #0
 80056e0:	4b8b      	ldr	r3, [pc, #556]	; (8005910 <_dtoa_r+0x600>)
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7fa ff90 	bl	8000608 <__aeabi_dmul>
 80056e8:	e9cd 0100 	strd	r0, r1, [sp]
 80056ec:	9f02      	ldr	r7, [sp, #8]
 80056ee:	3501      	adds	r5, #1
 80056f0:	4628      	mov	r0, r5
 80056f2:	f7fa ff1f 	bl	8000534 <__aeabi_i2d>
 80056f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056fa:	f7fa ff85 	bl	8000608 <__aeabi_dmul>
 80056fe:	2200      	movs	r2, #0
 8005700:	4b84      	ldr	r3, [pc, #528]	; (8005914 <_dtoa_r+0x604>)
 8005702:	f7fa fdcb 	bl	800029c <__adddf3>
 8005706:	4605      	mov	r5, r0
 8005708:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800570c:	2f00      	cmp	r7, #0
 800570e:	d15d      	bne.n	80057cc <_dtoa_r+0x4bc>
 8005710:	2200      	movs	r2, #0
 8005712:	4b81      	ldr	r3, [pc, #516]	; (8005918 <_dtoa_r+0x608>)
 8005714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005718:	f7fa fdbe 	bl	8000298 <__aeabi_dsub>
 800571c:	462a      	mov	r2, r5
 800571e:	4633      	mov	r3, r6
 8005720:	e9cd 0100 	strd	r0, r1, [sp]
 8005724:	f7fb fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8005728:	2800      	cmp	r0, #0
 800572a:	f040 8288 	bne.w	8005c3e <_dtoa_r+0x92e>
 800572e:	462a      	mov	r2, r5
 8005730:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005738:	f7fb f9d8 	bl	8000aec <__aeabi_dcmplt>
 800573c:	2800      	cmp	r0, #0
 800573e:	f040 827c 	bne.w	8005c3a <_dtoa_r+0x92a>
 8005742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005746:	e9cd 2300 	strd	r2, r3, [sp]
 800574a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800574c:	2b00      	cmp	r3, #0
 800574e:	f2c0 8150 	blt.w	80059f2 <_dtoa_r+0x6e2>
 8005752:	f1ba 0f0e 	cmp.w	sl, #14
 8005756:	f300 814c 	bgt.w	80059f2 <_dtoa_r+0x6e2>
 800575a:	4b6a      	ldr	r3, [pc, #424]	; (8005904 <_dtoa_r+0x5f4>)
 800575c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005760:	ed93 7b00 	vldr	d7, [r3]
 8005764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	ed8d 7b02 	vstr	d7, [sp, #8]
 800576c:	f280 80d8 	bge.w	8005920 <_dtoa_r+0x610>
 8005770:	f1b9 0f00 	cmp.w	r9, #0
 8005774:	f300 80d4 	bgt.w	8005920 <_dtoa_r+0x610>
 8005778:	f040 825e 	bne.w	8005c38 <_dtoa_r+0x928>
 800577c:	2200      	movs	r2, #0
 800577e:	4b66      	ldr	r3, [pc, #408]	; (8005918 <_dtoa_r+0x608>)
 8005780:	ec51 0b17 	vmov	r0, r1, d7
 8005784:	f7fa ff40 	bl	8000608 <__aeabi_dmul>
 8005788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800578c:	f7fb f9c2 	bl	8000b14 <__aeabi_dcmpge>
 8005790:	464f      	mov	r7, r9
 8005792:	464e      	mov	r6, r9
 8005794:	2800      	cmp	r0, #0
 8005796:	f040 8234 	bne.w	8005c02 <_dtoa_r+0x8f2>
 800579a:	2331      	movs	r3, #49	; 0x31
 800579c:	f10b 0501 	add.w	r5, fp, #1
 80057a0:	f88b 3000 	strb.w	r3, [fp]
 80057a4:	f10a 0a01 	add.w	sl, sl, #1
 80057a8:	e22f      	b.n	8005c0a <_dtoa_r+0x8fa>
 80057aa:	07f2      	lsls	r2, r6, #31
 80057ac:	d505      	bpl.n	80057ba <_dtoa_r+0x4aa>
 80057ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b2:	f7fa ff29 	bl	8000608 <__aeabi_dmul>
 80057b6:	3501      	adds	r5, #1
 80057b8:	2301      	movs	r3, #1
 80057ba:	1076      	asrs	r6, r6, #1
 80057bc:	3708      	adds	r7, #8
 80057be:	e772      	b.n	80056a6 <_dtoa_r+0x396>
 80057c0:	2502      	movs	r5, #2
 80057c2:	e774      	b.n	80056ae <_dtoa_r+0x39e>
 80057c4:	f8cd a020 	str.w	sl, [sp, #32]
 80057c8:	464f      	mov	r7, r9
 80057ca:	e791      	b.n	80056f0 <_dtoa_r+0x3e0>
 80057cc:	4b4d      	ldr	r3, [pc, #308]	; (8005904 <_dtoa_r+0x5f4>)
 80057ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80057d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d047      	beq.n	800586c <_dtoa_r+0x55c>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	2000      	movs	r0, #0
 80057e2:	494e      	ldr	r1, [pc, #312]	; (800591c <_dtoa_r+0x60c>)
 80057e4:	f7fb f83a 	bl	800085c <__aeabi_ddiv>
 80057e8:	462a      	mov	r2, r5
 80057ea:	4633      	mov	r3, r6
 80057ec:	f7fa fd54 	bl	8000298 <__aeabi_dsub>
 80057f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057f4:	465d      	mov	r5, fp
 80057f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057fa:	f7fb f9b5 	bl	8000b68 <__aeabi_d2iz>
 80057fe:	4606      	mov	r6, r0
 8005800:	f7fa fe98 	bl	8000534 <__aeabi_i2d>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800580c:	f7fa fd44 	bl	8000298 <__aeabi_dsub>
 8005810:	3630      	adds	r6, #48	; 0x30
 8005812:	f805 6b01 	strb.w	r6, [r5], #1
 8005816:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800581a:	e9cd 0100 	strd	r0, r1, [sp]
 800581e:	f7fb f965 	bl	8000aec <__aeabi_dcmplt>
 8005822:	2800      	cmp	r0, #0
 8005824:	d163      	bne.n	80058ee <_dtoa_r+0x5de>
 8005826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800582a:	2000      	movs	r0, #0
 800582c:	4937      	ldr	r1, [pc, #220]	; (800590c <_dtoa_r+0x5fc>)
 800582e:	f7fa fd33 	bl	8000298 <__aeabi_dsub>
 8005832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005836:	f7fb f959 	bl	8000aec <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	f040 80b7 	bne.w	80059ae <_dtoa_r+0x69e>
 8005840:	eba5 030b 	sub.w	r3, r5, fp
 8005844:	429f      	cmp	r7, r3
 8005846:	f77f af7c 	ble.w	8005742 <_dtoa_r+0x432>
 800584a:	2200      	movs	r2, #0
 800584c:	4b30      	ldr	r3, [pc, #192]	; (8005910 <_dtoa_r+0x600>)
 800584e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005852:	f7fa fed9 	bl	8000608 <__aeabi_dmul>
 8005856:	2200      	movs	r2, #0
 8005858:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <_dtoa_r+0x600>)
 800585e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005862:	f7fa fed1 	bl	8000608 <__aeabi_dmul>
 8005866:	e9cd 0100 	strd	r0, r1, [sp]
 800586a:	e7c4      	b.n	80057f6 <_dtoa_r+0x4e6>
 800586c:	462a      	mov	r2, r5
 800586e:	4633      	mov	r3, r6
 8005870:	f7fa feca 	bl	8000608 <__aeabi_dmul>
 8005874:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005878:	eb0b 0507 	add.w	r5, fp, r7
 800587c:	465e      	mov	r6, fp
 800587e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005882:	f7fb f971 	bl	8000b68 <__aeabi_d2iz>
 8005886:	4607      	mov	r7, r0
 8005888:	f7fa fe54 	bl	8000534 <__aeabi_i2d>
 800588c:	3730      	adds	r7, #48	; 0x30
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005896:	f7fa fcff 	bl	8000298 <__aeabi_dsub>
 800589a:	f806 7b01 	strb.w	r7, [r6], #1
 800589e:	42ae      	cmp	r6, r5
 80058a0:	e9cd 0100 	strd	r0, r1, [sp]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	d126      	bne.n	80058f8 <_dtoa_r+0x5e8>
 80058aa:	4b1c      	ldr	r3, [pc, #112]	; (800591c <_dtoa_r+0x60c>)
 80058ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058b0:	f7fa fcf4 	bl	800029c <__adddf3>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058bc:	f7fb f934 	bl	8000b28 <__aeabi_dcmpgt>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d174      	bne.n	80059ae <_dtoa_r+0x69e>
 80058c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058c8:	2000      	movs	r0, #0
 80058ca:	4914      	ldr	r1, [pc, #80]	; (800591c <_dtoa_r+0x60c>)
 80058cc:	f7fa fce4 	bl	8000298 <__aeabi_dsub>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058d8:	f7fb f908 	bl	8000aec <__aeabi_dcmplt>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f43f af30 	beq.w	8005742 <_dtoa_r+0x432>
 80058e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80058ec:	d002      	beq.n	80058f4 <_dtoa_r+0x5e4>
 80058ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80058f2:	e04a      	b.n	800598a <_dtoa_r+0x67a>
 80058f4:	4615      	mov	r5, r2
 80058f6:	e7f4      	b.n	80058e2 <_dtoa_r+0x5d2>
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <_dtoa_r+0x600>)
 80058fa:	f7fa fe85 	bl	8000608 <__aeabi_dmul>
 80058fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005902:	e7bc      	b.n	800587e <_dtoa_r+0x56e>
 8005904:	08006a58 	.word	0x08006a58
 8005908:	08006a30 	.word	0x08006a30
 800590c:	3ff00000 	.word	0x3ff00000
 8005910:	40240000 	.word	0x40240000
 8005914:	401c0000 	.word	0x401c0000
 8005918:	40140000 	.word	0x40140000
 800591c:	3fe00000 	.word	0x3fe00000
 8005920:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005924:	465d      	mov	r5, fp
 8005926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa ff95 	bl	800085c <__aeabi_ddiv>
 8005932:	f7fb f919 	bl	8000b68 <__aeabi_d2iz>
 8005936:	4680      	mov	r8, r0
 8005938:	f7fa fdfc 	bl	8000534 <__aeabi_i2d>
 800593c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005940:	f7fa fe62 	bl	8000608 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005950:	f7fa fca2 	bl	8000298 <__aeabi_dsub>
 8005954:	f805 6b01 	strb.w	r6, [r5], #1
 8005958:	eba5 060b 	sub.w	r6, r5, fp
 800595c:	45b1      	cmp	r9, r6
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	d139      	bne.n	80059d8 <_dtoa_r+0x6c8>
 8005964:	f7fa fc9a 	bl	800029c <__adddf3>
 8005968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800596c:	4606      	mov	r6, r0
 800596e:	460f      	mov	r7, r1
 8005970:	f7fb f8da 	bl	8000b28 <__aeabi_dcmpgt>
 8005974:	b9c8      	cbnz	r0, 80059aa <_dtoa_r+0x69a>
 8005976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fb f8ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8005982:	b110      	cbz	r0, 800598a <_dtoa_r+0x67a>
 8005984:	f018 0f01 	tst.w	r8, #1
 8005988:	d10f      	bne.n	80059aa <_dtoa_r+0x69a>
 800598a:	9904      	ldr	r1, [sp, #16]
 800598c:	4620      	mov	r0, r4
 800598e:	f000 facc 	bl	8005f2a <_Bfree>
 8005992:	2300      	movs	r3, #0
 8005994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005996:	702b      	strb	r3, [r5, #0]
 8005998:	f10a 0301 	add.w	r3, sl, #1
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8241 	beq.w	8005e28 <_dtoa_r+0xb18>
 80059a6:	601d      	str	r5, [r3, #0]
 80059a8:	e23e      	b.n	8005e28 <_dtoa_r+0xb18>
 80059aa:	f8cd a020 	str.w	sl, [sp, #32]
 80059ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059b2:	2a39      	cmp	r2, #57	; 0x39
 80059b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80059b8:	d108      	bne.n	80059cc <_dtoa_r+0x6bc>
 80059ba:	459b      	cmp	fp, r3
 80059bc:	d10a      	bne.n	80059d4 <_dtoa_r+0x6c4>
 80059be:	9b08      	ldr	r3, [sp, #32]
 80059c0:	3301      	adds	r3, #1
 80059c2:	9308      	str	r3, [sp, #32]
 80059c4:	2330      	movs	r3, #48	; 0x30
 80059c6:	f88b 3000 	strb.w	r3, [fp]
 80059ca:	465b      	mov	r3, fp
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	3201      	adds	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e78c      	b.n	80058ee <_dtoa_r+0x5de>
 80059d4:	461d      	mov	r5, r3
 80059d6:	e7ea      	b.n	80059ae <_dtoa_r+0x69e>
 80059d8:	2200      	movs	r2, #0
 80059da:	4b9b      	ldr	r3, [pc, #620]	; (8005c48 <_dtoa_r+0x938>)
 80059dc:	f7fa fe14 	bl	8000608 <__aeabi_dmul>
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	4606      	mov	r6, r0
 80059e6:	460f      	mov	r7, r1
 80059e8:	f7fb f876 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d09a      	beq.n	8005926 <_dtoa_r+0x616>
 80059f0:	e7cb      	b.n	800598a <_dtoa_r+0x67a>
 80059f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	f000 808b 	beq.w	8005b10 <_dtoa_r+0x800>
 80059fa:	9a06      	ldr	r2, [sp, #24]
 80059fc:	2a01      	cmp	r2, #1
 80059fe:	dc6e      	bgt.n	8005ade <_dtoa_r+0x7ce>
 8005a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d067      	beq.n	8005ad6 <_dtoa_r+0x7c6>
 8005a06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a0a:	9f07      	ldr	r7, [sp, #28]
 8005a0c:	9d05      	ldr	r5, [sp, #20]
 8005a0e:	9a05      	ldr	r2, [sp, #20]
 8005a10:	2101      	movs	r1, #1
 8005a12:	441a      	add	r2, r3
 8005a14:	4620      	mov	r0, r4
 8005a16:	9205      	str	r2, [sp, #20]
 8005a18:	4498      	add	r8, r3
 8005a1a:	f000 fb26 	bl	800606a <__i2b>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	dd0c      	ble.n	8005a3e <_dtoa_r+0x72e>
 8005a24:	f1b8 0f00 	cmp.w	r8, #0
 8005a28:	dd09      	ble.n	8005a3e <_dtoa_r+0x72e>
 8005a2a:	4545      	cmp	r5, r8
 8005a2c:	9a05      	ldr	r2, [sp, #20]
 8005a2e:	462b      	mov	r3, r5
 8005a30:	bfa8      	it	ge
 8005a32:	4643      	movge	r3, r8
 8005a34:	1ad2      	subs	r2, r2, r3
 8005a36:	9205      	str	r2, [sp, #20]
 8005a38:	1aed      	subs	r5, r5, r3
 8005a3a:	eba8 0803 	sub.w	r8, r8, r3
 8005a3e:	9b07      	ldr	r3, [sp, #28]
 8005a40:	b1eb      	cbz	r3, 8005a7e <_dtoa_r+0x76e>
 8005a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d067      	beq.n	8005b18 <_dtoa_r+0x808>
 8005a48:	b18f      	cbz	r7, 8005a6e <_dtoa_r+0x75e>
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 fbaa 	bl	80061a8 <__pow5mult>
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	4601      	mov	r1, r0
 8005a58:	4606      	mov	r6, r0
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 fb0e 	bl	800607c <__multiply>
 8005a60:	9904      	ldr	r1, [sp, #16]
 8005a62:	9008      	str	r0, [sp, #32]
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 fa60 	bl	8005f2a <_Bfree>
 8005a6a:	9b08      	ldr	r3, [sp, #32]
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	9b07      	ldr	r3, [sp, #28]
 8005a70:	1bda      	subs	r2, r3, r7
 8005a72:	d004      	beq.n	8005a7e <_dtoa_r+0x76e>
 8005a74:	9904      	ldr	r1, [sp, #16]
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 fb96 	bl	80061a8 <__pow5mult>
 8005a7c:	9004      	str	r0, [sp, #16]
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 faf2 	bl	800606a <__i2b>
 8005a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a88:	4607      	mov	r7, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 81d0 	beq.w	8005e30 <_dtoa_r+0xb20>
 8005a90:	461a      	mov	r2, r3
 8005a92:	4601      	mov	r1, r0
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fb87 	bl	80061a8 <__pow5mult>
 8005a9a:	9b06      	ldr	r3, [sp, #24]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	dc40      	bgt.n	8005b24 <_dtoa_r+0x814>
 8005aa2:	9b00      	ldr	r3, [sp, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d139      	bne.n	8005b1c <_dtoa_r+0x80c>
 8005aa8:	9b01      	ldr	r3, [sp, #4]
 8005aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d136      	bne.n	8005b20 <_dtoa_r+0x810>
 8005ab2:	9b01      	ldr	r3, [sp, #4]
 8005ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	0d1b      	lsrs	r3, r3, #20
 8005aba:	051b      	lsls	r3, r3, #20
 8005abc:	b12b      	cbz	r3, 8005aca <_dtoa_r+0x7ba>
 8005abe:	9b05      	ldr	r3, [sp, #20]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	f108 0801 	add.w	r8, r8, #1
 8005ac8:	2301      	movs	r3, #1
 8005aca:	9307      	str	r3, [sp, #28]
 8005acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d12a      	bne.n	8005b28 <_dtoa_r+0x818>
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e030      	b.n	8005b38 <_dtoa_r+0x828>
 8005ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ad8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005adc:	e795      	b.n	8005a0a <_dtoa_r+0x6fa>
 8005ade:	9b07      	ldr	r3, [sp, #28]
 8005ae0:	f109 37ff 	add.w	r7, r9, #4294967295
 8005ae4:	42bb      	cmp	r3, r7
 8005ae6:	bfbf      	itttt	lt
 8005ae8:	9b07      	ldrlt	r3, [sp, #28]
 8005aea:	9707      	strlt	r7, [sp, #28]
 8005aec:	1afa      	sublt	r2, r7, r3
 8005aee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005af0:	bfbb      	ittet	lt
 8005af2:	189b      	addlt	r3, r3, r2
 8005af4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005af6:	1bdf      	subge	r7, r3, r7
 8005af8:	2700      	movlt	r7, #0
 8005afa:	f1b9 0f00 	cmp.w	r9, #0
 8005afe:	bfb5      	itete	lt
 8005b00:	9b05      	ldrlt	r3, [sp, #20]
 8005b02:	9d05      	ldrge	r5, [sp, #20]
 8005b04:	eba3 0509 	sublt.w	r5, r3, r9
 8005b08:	464b      	movge	r3, r9
 8005b0a:	bfb8      	it	lt
 8005b0c:	2300      	movlt	r3, #0
 8005b0e:	e77e      	b.n	8005a0e <_dtoa_r+0x6fe>
 8005b10:	9f07      	ldr	r7, [sp, #28]
 8005b12:	9d05      	ldr	r5, [sp, #20]
 8005b14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b16:	e783      	b.n	8005a20 <_dtoa_r+0x710>
 8005b18:	9a07      	ldr	r2, [sp, #28]
 8005b1a:	e7ab      	b.n	8005a74 <_dtoa_r+0x764>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e7d4      	b.n	8005aca <_dtoa_r+0x7ba>
 8005b20:	9b00      	ldr	r3, [sp, #0]
 8005b22:	e7d2      	b.n	8005aca <_dtoa_r+0x7ba>
 8005b24:	2300      	movs	r3, #0
 8005b26:	9307      	str	r3, [sp, #28]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b2e:	6918      	ldr	r0, [r3, #16]
 8005b30:	f000 fa4d 	bl	8005fce <__hi0bits>
 8005b34:	f1c0 0020 	rsb	r0, r0, #32
 8005b38:	4440      	add	r0, r8
 8005b3a:	f010 001f 	ands.w	r0, r0, #31
 8005b3e:	d047      	beq.n	8005bd0 <_dtoa_r+0x8c0>
 8005b40:	f1c0 0320 	rsb	r3, r0, #32
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	dd3b      	ble.n	8005bc0 <_dtoa_r+0x8b0>
 8005b48:	9b05      	ldr	r3, [sp, #20]
 8005b4a:	f1c0 001c 	rsb	r0, r0, #28
 8005b4e:	4403      	add	r3, r0
 8005b50:	9305      	str	r3, [sp, #20]
 8005b52:	4405      	add	r5, r0
 8005b54:	4480      	add	r8, r0
 8005b56:	9b05      	ldr	r3, [sp, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dd05      	ble.n	8005b68 <_dtoa_r+0x858>
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	9904      	ldr	r1, [sp, #16]
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fb6f 	bl	8006244 <__lshift>
 8005b66:	9004      	str	r0, [sp, #16]
 8005b68:	f1b8 0f00 	cmp.w	r8, #0
 8005b6c:	dd05      	ble.n	8005b7a <_dtoa_r+0x86a>
 8005b6e:	4639      	mov	r1, r7
 8005b70:	4642      	mov	r2, r8
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fb66 	bl	8006244 <__lshift>
 8005b78:	4607      	mov	r7, r0
 8005b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b7c:	b353      	cbz	r3, 8005bd4 <_dtoa_r+0x8c4>
 8005b7e:	4639      	mov	r1, r7
 8005b80:	9804      	ldr	r0, [sp, #16]
 8005b82:	f000 fbb3 	bl	80062ec <__mcmp>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	da24      	bge.n	8005bd4 <_dtoa_r+0x8c4>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	220a      	movs	r2, #10
 8005b8e:	9904      	ldr	r1, [sp, #16]
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 f9e1 	bl	8005f58 <__multadd>
 8005b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b98:	9004      	str	r0, [sp, #16]
 8005b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 814d 	beq.w	8005e3e <_dtoa_r+0xb2e>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	220a      	movs	r2, #10
 8005baa:	4620      	mov	r0, r4
 8005bac:	f000 f9d4 	bl	8005f58 <__multadd>
 8005bb0:	9b02      	ldr	r3, [sp, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	dc4f      	bgt.n	8005c58 <_dtoa_r+0x948>
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	dd4c      	ble.n	8005c58 <_dtoa_r+0x948>
 8005bbe:	e011      	b.n	8005be4 <_dtoa_r+0x8d4>
 8005bc0:	d0c9      	beq.n	8005b56 <_dtoa_r+0x846>
 8005bc2:	9a05      	ldr	r2, [sp, #20]
 8005bc4:	331c      	adds	r3, #28
 8005bc6:	441a      	add	r2, r3
 8005bc8:	9205      	str	r2, [sp, #20]
 8005bca:	441d      	add	r5, r3
 8005bcc:	4498      	add	r8, r3
 8005bce:	e7c2      	b.n	8005b56 <_dtoa_r+0x846>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	e7f6      	b.n	8005bc2 <_dtoa_r+0x8b2>
 8005bd4:	f1b9 0f00 	cmp.w	r9, #0
 8005bd8:	dc38      	bgt.n	8005c4c <_dtoa_r+0x93c>
 8005bda:	9b06      	ldr	r3, [sp, #24]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	dd35      	ble.n	8005c4c <_dtoa_r+0x93c>
 8005be0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005be4:	9b02      	ldr	r3, [sp, #8]
 8005be6:	b963      	cbnz	r3, 8005c02 <_dtoa_r+0x8f2>
 8005be8:	4639      	mov	r1, r7
 8005bea:	2205      	movs	r2, #5
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 f9b3 	bl	8005f58 <__multadd>
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	9804      	ldr	r0, [sp, #16]
 8005bf8:	f000 fb78 	bl	80062ec <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f73f adcc 	bgt.w	800579a <_dtoa_r+0x48a>
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	465d      	mov	r5, fp
 8005c06:	ea6f 0a03 	mvn.w	sl, r3
 8005c0a:	f04f 0900 	mov.w	r9, #0
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f98a 	bl	8005f2a <_Bfree>
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	f43f aeb7 	beq.w	800598a <_dtoa_r+0x67a>
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	d005      	beq.n	8005c2e <_dtoa_r+0x91e>
 8005c22:	45b1      	cmp	r9, r6
 8005c24:	d003      	beq.n	8005c2e <_dtoa_r+0x91e>
 8005c26:	4649      	mov	r1, r9
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f97e 	bl	8005f2a <_Bfree>
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 f97a 	bl	8005f2a <_Bfree>
 8005c36:	e6a8      	b.n	800598a <_dtoa_r+0x67a>
 8005c38:	2700      	movs	r7, #0
 8005c3a:	463e      	mov	r6, r7
 8005c3c:	e7e1      	b.n	8005c02 <_dtoa_r+0x8f2>
 8005c3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c42:	463e      	mov	r6, r7
 8005c44:	e5a9      	b.n	800579a <_dtoa_r+0x48a>
 8005c46:	bf00      	nop
 8005c48:	40240000 	.word	0x40240000
 8005c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80fa 	beq.w	8005e4c <_dtoa_r+0xb3c>
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	dd05      	ble.n	8005c68 <_dtoa_r+0x958>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 faef 	bl	8006244 <__lshift>
 8005c66:	4606      	mov	r6, r0
 8005c68:	9b07      	ldr	r3, [sp, #28]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d04c      	beq.n	8005d08 <_dtoa_r+0x9f8>
 8005c6e:	6871      	ldr	r1, [r6, #4]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 f926 	bl	8005ec2 <_Balloc>
 8005c76:	6932      	ldr	r2, [r6, #16]
 8005c78:	3202      	adds	r2, #2
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	f106 010c 	add.w	r1, r6, #12
 8005c82:	300c      	adds	r0, #12
 8005c84:	f000 f912 	bl	8005eac <memcpy>
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 fad9 	bl	8006244 <__lshift>
 8005c92:	9b00      	ldr	r3, [sp, #0]
 8005c94:	f8cd b014 	str.w	fp, [sp, #20]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	46b1      	mov	r9, r6
 8005c9e:	9307      	str	r3, [sp, #28]
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	9804      	ldr	r0, [sp, #16]
 8005ca6:	f7ff faa7 	bl	80051f8 <quorem>
 8005caa:	4649      	mov	r1, r9
 8005cac:	4605      	mov	r5, r0
 8005cae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cb2:	9804      	ldr	r0, [sp, #16]
 8005cb4:	f000 fb1a 	bl	80062ec <__mcmp>
 8005cb8:	4632      	mov	r2, r6
 8005cba:	9000      	str	r0, [sp, #0]
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 fb2e 	bl	8006320 <__mdiff>
 8005cc4:	68c3      	ldr	r3, [r0, #12]
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	bb03      	cbnz	r3, 8005d0c <_dtoa_r+0x9fc>
 8005cca:	4601      	mov	r1, r0
 8005ccc:	9008      	str	r0, [sp, #32]
 8005cce:	9804      	ldr	r0, [sp, #16]
 8005cd0:	f000 fb0c 	bl	80062ec <__mcmp>
 8005cd4:	9a08      	ldr	r2, [sp, #32]
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4620      	mov	r0, r4
 8005cdc:	9308      	str	r3, [sp, #32]
 8005cde:	f000 f924 	bl	8005f2a <_Bfree>
 8005ce2:	9b08      	ldr	r3, [sp, #32]
 8005ce4:	b9a3      	cbnz	r3, 8005d10 <_dtoa_r+0xa00>
 8005ce6:	9a06      	ldr	r2, [sp, #24]
 8005ce8:	b992      	cbnz	r2, 8005d10 <_dtoa_r+0xa00>
 8005cea:	9a07      	ldr	r2, [sp, #28]
 8005cec:	b982      	cbnz	r2, 8005d10 <_dtoa_r+0xa00>
 8005cee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005cf2:	d029      	beq.n	8005d48 <_dtoa_r+0xa38>
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dd01      	ble.n	8005cfe <_dtoa_r+0x9ee>
 8005cfa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005cfe:	9b05      	ldr	r3, [sp, #20]
 8005d00:	1c5d      	adds	r5, r3, #1
 8005d02:	f883 8000 	strb.w	r8, [r3]
 8005d06:	e782      	b.n	8005c0e <_dtoa_r+0x8fe>
 8005d08:	4630      	mov	r0, r6
 8005d0a:	e7c2      	b.n	8005c92 <_dtoa_r+0x982>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e7e3      	b.n	8005cd8 <_dtoa_r+0x9c8>
 8005d10:	9a00      	ldr	r2, [sp, #0]
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	db04      	blt.n	8005d20 <_dtoa_r+0xa10>
 8005d16:	d125      	bne.n	8005d64 <_dtoa_r+0xa54>
 8005d18:	9a06      	ldr	r2, [sp, #24]
 8005d1a:	bb1a      	cbnz	r2, 8005d64 <_dtoa_r+0xa54>
 8005d1c:	9a07      	ldr	r2, [sp, #28]
 8005d1e:	bb0a      	cbnz	r2, 8005d64 <_dtoa_r+0xa54>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	ddec      	ble.n	8005cfe <_dtoa_r+0x9ee>
 8005d24:	2201      	movs	r2, #1
 8005d26:	9904      	ldr	r1, [sp, #16]
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fa8b 	bl	8006244 <__lshift>
 8005d2e:	4639      	mov	r1, r7
 8005d30:	9004      	str	r0, [sp, #16]
 8005d32:	f000 fadb 	bl	80062ec <__mcmp>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	dc03      	bgt.n	8005d42 <_dtoa_r+0xa32>
 8005d3a:	d1e0      	bne.n	8005cfe <_dtoa_r+0x9ee>
 8005d3c:	f018 0f01 	tst.w	r8, #1
 8005d40:	d0dd      	beq.n	8005cfe <_dtoa_r+0x9ee>
 8005d42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d46:	d1d8      	bne.n	8005cfa <_dtoa_r+0x9ea>
 8005d48:	9b05      	ldr	r3, [sp, #20]
 8005d4a:	9a05      	ldr	r2, [sp, #20]
 8005d4c:	1c5d      	adds	r5, r3, #1
 8005d4e:	2339      	movs	r3, #57	; 0x39
 8005d50:	7013      	strb	r3, [r2, #0]
 8005d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d56:	2b39      	cmp	r3, #57	; 0x39
 8005d58:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d5c:	d04f      	beq.n	8005dfe <_dtoa_r+0xaee>
 8005d5e:	3301      	adds	r3, #1
 8005d60:	7013      	strb	r3, [r2, #0]
 8005d62:	e754      	b.n	8005c0e <_dtoa_r+0x8fe>
 8005d64:	9a05      	ldr	r2, [sp, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f102 0501 	add.w	r5, r2, #1
 8005d6c:	dd06      	ble.n	8005d7c <_dtoa_r+0xa6c>
 8005d6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d72:	d0e9      	beq.n	8005d48 <_dtoa_r+0xa38>
 8005d74:	f108 0801 	add.w	r8, r8, #1
 8005d78:	9b05      	ldr	r3, [sp, #20]
 8005d7a:	e7c2      	b.n	8005d02 <_dtoa_r+0x9f2>
 8005d7c:	9a02      	ldr	r2, [sp, #8]
 8005d7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005d82:	eba5 030b 	sub.w	r3, r5, fp
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d021      	beq.n	8005dce <_dtoa_r+0xabe>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	9904      	ldr	r1, [sp, #16]
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 f8e1 	bl	8005f58 <__multadd>
 8005d96:	45b1      	cmp	r9, r6
 8005d98:	9004      	str	r0, [sp, #16]
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	f04f 020a 	mov.w	r2, #10
 8005da2:	4649      	mov	r1, r9
 8005da4:	4620      	mov	r0, r4
 8005da6:	d105      	bne.n	8005db4 <_dtoa_r+0xaa4>
 8005da8:	f000 f8d6 	bl	8005f58 <__multadd>
 8005dac:	4681      	mov	r9, r0
 8005dae:	4606      	mov	r6, r0
 8005db0:	9505      	str	r5, [sp, #20]
 8005db2:	e776      	b.n	8005ca2 <_dtoa_r+0x992>
 8005db4:	f000 f8d0 	bl	8005f58 <__multadd>
 8005db8:	4631      	mov	r1, r6
 8005dba:	4681      	mov	r9, r0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 f8c9 	bl	8005f58 <__multadd>
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	e7f2      	b.n	8005db0 <_dtoa_r+0xaa0>
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	2201      	movs	r2, #1
 8005dd0:	9904      	ldr	r1, [sp, #16]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 fa36 	bl	8006244 <__lshift>
 8005dd8:	4639      	mov	r1, r7
 8005dda:	9004      	str	r0, [sp, #16]
 8005ddc:	f000 fa86 	bl	80062ec <__mcmp>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	dcb6      	bgt.n	8005d52 <_dtoa_r+0xa42>
 8005de4:	d102      	bne.n	8005dec <_dtoa_r+0xadc>
 8005de6:	f018 0f01 	tst.w	r8, #1
 8005dea:	d1b2      	bne.n	8005d52 <_dtoa_r+0xa42>
 8005dec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005df0:	2b30      	cmp	r3, #48	; 0x30
 8005df2:	f105 32ff 	add.w	r2, r5, #4294967295
 8005df6:	f47f af0a 	bne.w	8005c0e <_dtoa_r+0x8fe>
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	e7f6      	b.n	8005dec <_dtoa_r+0xadc>
 8005dfe:	4593      	cmp	fp, r2
 8005e00:	d105      	bne.n	8005e0e <_dtoa_r+0xafe>
 8005e02:	2331      	movs	r3, #49	; 0x31
 8005e04:	f10a 0a01 	add.w	sl, sl, #1
 8005e08:	f88b 3000 	strb.w	r3, [fp]
 8005e0c:	e6ff      	b.n	8005c0e <_dtoa_r+0x8fe>
 8005e0e:	4615      	mov	r5, r2
 8005e10:	e79f      	b.n	8005d52 <_dtoa_r+0xa42>
 8005e12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005e78 <_dtoa_r+0xb68>
 8005e16:	e007      	b.n	8005e28 <_dtoa_r+0xb18>
 8005e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005e7c <_dtoa_r+0xb6c>
 8005e1e:	b11b      	cbz	r3, 8005e28 <_dtoa_r+0xb18>
 8005e20:	f10b 0308 	add.w	r3, fp, #8
 8005e24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	4658      	mov	r0, fp
 8005e2a:	b017      	add	sp, #92	; 0x5c
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f77f ae35 	ble.w	8005aa2 <_dtoa_r+0x792>
 8005e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	e649      	b.n	8005ad2 <_dtoa_r+0x7c2>
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dc03      	bgt.n	8005e4c <_dtoa_r+0xb3c>
 8005e44:	9b06      	ldr	r3, [sp, #24]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	f73f aecc 	bgt.w	8005be4 <_dtoa_r+0x8d4>
 8005e4c:	465d      	mov	r5, fp
 8005e4e:	4639      	mov	r1, r7
 8005e50:	9804      	ldr	r0, [sp, #16]
 8005e52:	f7ff f9d1 	bl	80051f8 <quorem>
 8005e56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e5a:	f805 8b01 	strb.w	r8, [r5], #1
 8005e5e:	9a02      	ldr	r2, [sp, #8]
 8005e60:	eba5 030b 	sub.w	r3, r5, fp
 8005e64:	429a      	cmp	r2, r3
 8005e66:	ddb0      	ble.n	8005dca <_dtoa_r+0xaba>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	9904      	ldr	r1, [sp, #16]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f872 	bl	8005f58 <__multadd>
 8005e74:	9004      	str	r0, [sp, #16]
 8005e76:	e7ea      	b.n	8005e4e <_dtoa_r+0xb3e>
 8005e78:	080069fc 	.word	0x080069fc
 8005e7c:	08006a20 	.word	0x08006a20

08005e80 <_localeconv_r>:
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <_localeconv_r+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a18      	ldr	r0, [r3, #32]
 8005e86:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <_localeconv_r+0x18>)
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	bf08      	it	eq
 8005e8c:	4618      	moveq	r0, r3
 8005e8e:	30f0      	adds	r0, #240	; 0xf0
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	2000000c 	.word	0x2000000c
 8005e98:	20000070 	.word	0x20000070

08005e9c <malloc>:
 8005e9c:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <malloc+0xc>)
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	f000 bb45 	b.w	8006530 <_malloc_r>
 8005ea6:	bf00      	nop
 8005ea8:	2000000c 	.word	0x2000000c

08005eac <memcpy>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	1e43      	subs	r3, r0, #1
 8005eb0:	440a      	add	r2, r1
 8005eb2:	4291      	cmp	r1, r2
 8005eb4:	d100      	bne.n	8005eb8 <memcpy+0xc>
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec0:	e7f7      	b.n	8005eb2 <memcpy+0x6>

08005ec2 <_Balloc>:
 8005ec2:	b570      	push	{r4, r5, r6, lr}
 8005ec4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b93d      	cbnz	r5, 8005edc <_Balloc+0x1a>
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f7ff ffe5 	bl	8005e9c <malloc>
 8005ed2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ed4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ed8:	6005      	str	r5, [r0, #0]
 8005eda:	60c5      	str	r5, [r0, #12]
 8005edc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ede:	68eb      	ldr	r3, [r5, #12]
 8005ee0:	b183      	cbz	r3, 8005f04 <_Balloc+0x42>
 8005ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005eea:	b9b8      	cbnz	r0, 8005f1c <_Balloc+0x5a>
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f506 	lsl.w	r5, r1, r6
 8005ef2:	1d6a      	adds	r2, r5, #5
 8005ef4:	0092      	lsls	r2, r2, #2
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 fabe 	bl	8006478 <_calloc_r>
 8005efc:	b160      	cbz	r0, 8005f18 <_Balloc+0x56>
 8005efe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f02:	e00e      	b.n	8005f22 <_Balloc+0x60>
 8005f04:	2221      	movs	r2, #33	; 0x21
 8005f06:	2104      	movs	r1, #4
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fab5 	bl	8006478 <_calloc_r>
 8005f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f10:	60e8      	str	r0, [r5, #12]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e4      	bne.n	8005ee2 <_Balloc+0x20>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	6802      	ldr	r2, [r0, #0]
 8005f1e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f22:	2300      	movs	r3, #0
 8005f24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f28:	e7f7      	b.n	8005f1a <_Balloc+0x58>

08005f2a <_Bfree>:
 8005f2a:	b570      	push	{r4, r5, r6, lr}
 8005f2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	b93c      	cbnz	r4, 8005f44 <_Bfree+0x1a>
 8005f34:	2010      	movs	r0, #16
 8005f36:	f7ff ffb1 	bl	8005e9c <malloc>
 8005f3a:	6270      	str	r0, [r6, #36]	; 0x24
 8005f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f40:	6004      	str	r4, [r0, #0]
 8005f42:	60c4      	str	r4, [r0, #12]
 8005f44:	b13d      	cbz	r5, 8005f56 <_Bfree+0x2c>
 8005f46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f48:	686a      	ldr	r2, [r5, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f50:	6029      	str	r1, [r5, #0]
 8005f52:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f56:	bd70      	pop	{r4, r5, r6, pc}

08005f58 <__multadd>:
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	690d      	ldr	r5, [r1, #16]
 8005f5e:	461f      	mov	r7, r3
 8005f60:	4606      	mov	r6, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	f101 0c14 	add.w	ip, r1, #20
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8dc 0000 	ldr.w	r0, [ip]
 8005f6e:	b281      	uxth	r1, r0
 8005f70:	fb02 7101 	mla	r1, r2, r1, r7
 8005f74:	0c0f      	lsrs	r7, r1, #16
 8005f76:	0c00      	lsrs	r0, r0, #16
 8005f78:	fb02 7000 	mla	r0, r2, r0, r7
 8005f7c:	b289      	uxth	r1, r1
 8005f7e:	3301      	adds	r3, #1
 8005f80:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f84:	429d      	cmp	r5, r3
 8005f86:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005f8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f8e:	dcec      	bgt.n	8005f6a <__multadd+0x12>
 8005f90:	b1d7      	cbz	r7, 8005fc8 <__multadd+0x70>
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc12      	bgt.n	8005fbe <__multadd+0x66>
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	3101      	adds	r1, #1
 8005f9e:	f7ff ff90 	bl	8005ec2 <_Balloc>
 8005fa2:	6922      	ldr	r2, [r4, #16]
 8005fa4:	3202      	adds	r2, #2
 8005fa6:	f104 010c 	add.w	r1, r4, #12
 8005faa:	4680      	mov	r8, r0
 8005fac:	0092      	lsls	r2, r2, #2
 8005fae:	300c      	adds	r0, #12
 8005fb0:	f7ff ff7c 	bl	8005eac <memcpy>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ffb7 	bl	8005f2a <_Bfree>
 8005fbc:	4644      	mov	r4, r8
 8005fbe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fc2:	3501      	adds	r5, #1
 8005fc4:	615f      	str	r7, [r3, #20]
 8005fc6:	6125      	str	r5, [r4, #16]
 8005fc8:	4620      	mov	r0, r4
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fce <__hi0bits>:
 8005fce:	0c02      	lsrs	r2, r0, #16
 8005fd0:	0412      	lsls	r2, r2, #16
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	b9b2      	cbnz	r2, 8006004 <__hi0bits+0x36>
 8005fd6:	0403      	lsls	r3, r0, #16
 8005fd8:	2010      	movs	r0, #16
 8005fda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fde:	bf04      	itt	eq
 8005fe0:	021b      	lsleq	r3, r3, #8
 8005fe2:	3008      	addeq	r0, #8
 8005fe4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fe8:	bf04      	itt	eq
 8005fea:	011b      	lsleq	r3, r3, #4
 8005fec:	3004      	addeq	r0, #4
 8005fee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ff2:	bf04      	itt	eq
 8005ff4:	009b      	lsleq	r3, r3, #2
 8005ff6:	3002      	addeq	r0, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db06      	blt.n	800600a <__hi0bits+0x3c>
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	d503      	bpl.n	8006008 <__hi0bits+0x3a>
 8006000:	3001      	adds	r0, #1
 8006002:	4770      	bx	lr
 8006004:	2000      	movs	r0, #0
 8006006:	e7e8      	b.n	8005fda <__hi0bits+0xc>
 8006008:	2020      	movs	r0, #32
 800600a:	4770      	bx	lr

0800600c <__lo0bits>:
 800600c:	6803      	ldr	r3, [r0, #0]
 800600e:	f013 0207 	ands.w	r2, r3, #7
 8006012:	4601      	mov	r1, r0
 8006014:	d00b      	beq.n	800602e <__lo0bits+0x22>
 8006016:	07da      	lsls	r2, r3, #31
 8006018:	d423      	bmi.n	8006062 <__lo0bits+0x56>
 800601a:	0798      	lsls	r0, r3, #30
 800601c:	bf49      	itett	mi
 800601e:	085b      	lsrmi	r3, r3, #1
 8006020:	089b      	lsrpl	r3, r3, #2
 8006022:	2001      	movmi	r0, #1
 8006024:	600b      	strmi	r3, [r1, #0]
 8006026:	bf5c      	itt	pl
 8006028:	600b      	strpl	r3, [r1, #0]
 800602a:	2002      	movpl	r0, #2
 800602c:	4770      	bx	lr
 800602e:	b298      	uxth	r0, r3
 8006030:	b9a8      	cbnz	r0, 800605e <__lo0bits+0x52>
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	2010      	movs	r0, #16
 8006036:	f013 0fff 	tst.w	r3, #255	; 0xff
 800603a:	bf04      	itt	eq
 800603c:	0a1b      	lsreq	r3, r3, #8
 800603e:	3008      	addeq	r0, #8
 8006040:	071a      	lsls	r2, r3, #28
 8006042:	bf04      	itt	eq
 8006044:	091b      	lsreq	r3, r3, #4
 8006046:	3004      	addeq	r0, #4
 8006048:	079a      	lsls	r2, r3, #30
 800604a:	bf04      	itt	eq
 800604c:	089b      	lsreq	r3, r3, #2
 800604e:	3002      	addeq	r0, #2
 8006050:	07da      	lsls	r2, r3, #31
 8006052:	d402      	bmi.n	800605a <__lo0bits+0x4e>
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	d006      	beq.n	8006066 <__lo0bits+0x5a>
 8006058:	3001      	adds	r0, #1
 800605a:	600b      	str	r3, [r1, #0]
 800605c:	4770      	bx	lr
 800605e:	4610      	mov	r0, r2
 8006060:	e7e9      	b.n	8006036 <__lo0bits+0x2a>
 8006062:	2000      	movs	r0, #0
 8006064:	4770      	bx	lr
 8006066:	2020      	movs	r0, #32
 8006068:	4770      	bx	lr

0800606a <__i2b>:
 800606a:	b510      	push	{r4, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	2101      	movs	r1, #1
 8006070:	f7ff ff27 	bl	8005ec2 <_Balloc>
 8006074:	2201      	movs	r2, #1
 8006076:	6144      	str	r4, [r0, #20]
 8006078:	6102      	str	r2, [r0, #16]
 800607a:	bd10      	pop	{r4, pc}

0800607c <__multiply>:
 800607c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	4614      	mov	r4, r2
 8006082:	690a      	ldr	r2, [r1, #16]
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	429a      	cmp	r2, r3
 8006088:	bfb8      	it	lt
 800608a:	460b      	movlt	r3, r1
 800608c:	4688      	mov	r8, r1
 800608e:	bfbc      	itt	lt
 8006090:	46a0      	movlt	r8, r4
 8006092:	461c      	movlt	r4, r3
 8006094:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006098:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800609c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060a4:	eb07 0609 	add.w	r6, r7, r9
 80060a8:	42b3      	cmp	r3, r6
 80060aa:	bfb8      	it	lt
 80060ac:	3101      	addlt	r1, #1
 80060ae:	f7ff ff08 	bl	8005ec2 <_Balloc>
 80060b2:	f100 0514 	add.w	r5, r0, #20
 80060b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060ba:	462b      	mov	r3, r5
 80060bc:	2200      	movs	r2, #0
 80060be:	4573      	cmp	r3, lr
 80060c0:	d316      	bcc.n	80060f0 <__multiply+0x74>
 80060c2:	f104 0214 	add.w	r2, r4, #20
 80060c6:	f108 0114 	add.w	r1, r8, #20
 80060ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80060ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	9b00      	ldr	r3, [sp, #0]
 80060d6:	9201      	str	r2, [sp, #4]
 80060d8:	4293      	cmp	r3, r2
 80060da:	d80c      	bhi.n	80060f6 <__multiply+0x7a>
 80060dc:	2e00      	cmp	r6, #0
 80060de:	dd03      	ble.n	80060e8 <__multiply+0x6c>
 80060e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05d      	beq.n	80061a4 <__multiply+0x128>
 80060e8:	6106      	str	r6, [r0, #16]
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	f843 2b04 	str.w	r2, [r3], #4
 80060f4:	e7e3      	b.n	80060be <__multiply+0x42>
 80060f6:	f8b2 b000 	ldrh.w	fp, [r2]
 80060fa:	f1bb 0f00 	cmp.w	fp, #0
 80060fe:	d023      	beq.n	8006148 <__multiply+0xcc>
 8006100:	4689      	mov	r9, r1
 8006102:	46ac      	mov	ip, r5
 8006104:	f04f 0800 	mov.w	r8, #0
 8006108:	f859 4b04 	ldr.w	r4, [r9], #4
 800610c:	f8dc a000 	ldr.w	sl, [ip]
 8006110:	b2a3      	uxth	r3, r4
 8006112:	fa1f fa8a 	uxth.w	sl, sl
 8006116:	fb0b a303 	mla	r3, fp, r3, sl
 800611a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800611e:	f8dc 4000 	ldr.w	r4, [ip]
 8006122:	4443      	add	r3, r8
 8006124:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006128:	fb0b 840a 	mla	r4, fp, sl, r8
 800612c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006130:	46e2      	mov	sl, ip
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006138:	454f      	cmp	r7, r9
 800613a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800613e:	f84a 3b04 	str.w	r3, [sl], #4
 8006142:	d82b      	bhi.n	800619c <__multiply+0x120>
 8006144:	f8cc 8004 	str.w	r8, [ip, #4]
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800614e:	3204      	adds	r2, #4
 8006150:	f1ba 0f00 	cmp.w	sl, #0
 8006154:	d020      	beq.n	8006198 <__multiply+0x11c>
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	4689      	mov	r9, r1
 800615a:	46a8      	mov	r8, r5
 800615c:	f04f 0b00 	mov.w	fp, #0
 8006160:	f8b9 c000 	ldrh.w	ip, [r9]
 8006164:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006168:	fb0a 440c 	mla	r4, sl, ip, r4
 800616c:	445c      	add	r4, fp
 800616e:	46c4      	mov	ip, r8
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006176:	f84c 3b04 	str.w	r3, [ip], #4
 800617a:	f859 3b04 	ldr.w	r3, [r9], #4
 800617e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	fb0a b303 	mla	r3, sl, r3, fp
 8006188:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800618c:	454f      	cmp	r7, r9
 800618e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006192:	d805      	bhi.n	80061a0 <__multiply+0x124>
 8006194:	f8c8 3004 	str.w	r3, [r8, #4]
 8006198:	3504      	adds	r5, #4
 800619a:	e79b      	b.n	80060d4 <__multiply+0x58>
 800619c:	46d4      	mov	ip, sl
 800619e:	e7b3      	b.n	8006108 <__multiply+0x8c>
 80061a0:	46e0      	mov	r8, ip
 80061a2:	e7dd      	b.n	8006160 <__multiply+0xe4>
 80061a4:	3e01      	subs	r6, #1
 80061a6:	e799      	b.n	80060dc <__multiply+0x60>

080061a8 <__pow5mult>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	4615      	mov	r5, r2
 80061ae:	f012 0203 	ands.w	r2, r2, #3
 80061b2:	4606      	mov	r6, r0
 80061b4:	460f      	mov	r7, r1
 80061b6:	d007      	beq.n	80061c8 <__pow5mult+0x20>
 80061b8:	3a01      	subs	r2, #1
 80061ba:	4c21      	ldr	r4, [pc, #132]	; (8006240 <__pow5mult+0x98>)
 80061bc:	2300      	movs	r3, #0
 80061be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061c2:	f7ff fec9 	bl	8005f58 <__multadd>
 80061c6:	4607      	mov	r7, r0
 80061c8:	10ad      	asrs	r5, r5, #2
 80061ca:	d035      	beq.n	8006238 <__pow5mult+0x90>
 80061cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061ce:	b93c      	cbnz	r4, 80061e0 <__pow5mult+0x38>
 80061d0:	2010      	movs	r0, #16
 80061d2:	f7ff fe63 	bl	8005e9c <malloc>
 80061d6:	6270      	str	r0, [r6, #36]	; 0x24
 80061d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061dc:	6004      	str	r4, [r0, #0]
 80061de:	60c4      	str	r4, [r0, #12]
 80061e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061e8:	b94c      	cbnz	r4, 80061fe <__pow5mult+0x56>
 80061ea:	f240 2171 	movw	r1, #625	; 0x271
 80061ee:	4630      	mov	r0, r6
 80061f0:	f7ff ff3b 	bl	800606a <__i2b>
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80061fa:	4604      	mov	r4, r0
 80061fc:	6003      	str	r3, [r0, #0]
 80061fe:	f04f 0800 	mov.w	r8, #0
 8006202:	07eb      	lsls	r3, r5, #31
 8006204:	d50a      	bpl.n	800621c <__pow5mult+0x74>
 8006206:	4639      	mov	r1, r7
 8006208:	4622      	mov	r2, r4
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff ff36 	bl	800607c <__multiply>
 8006210:	4639      	mov	r1, r7
 8006212:	4681      	mov	r9, r0
 8006214:	4630      	mov	r0, r6
 8006216:	f7ff fe88 	bl	8005f2a <_Bfree>
 800621a:	464f      	mov	r7, r9
 800621c:	106d      	asrs	r5, r5, #1
 800621e:	d00b      	beq.n	8006238 <__pow5mult+0x90>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	b938      	cbnz	r0, 8006234 <__pow5mult+0x8c>
 8006224:	4622      	mov	r2, r4
 8006226:	4621      	mov	r1, r4
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff ff27 	bl	800607c <__multiply>
 800622e:	6020      	str	r0, [r4, #0]
 8006230:	f8c0 8000 	str.w	r8, [r0]
 8006234:	4604      	mov	r4, r0
 8006236:	e7e4      	b.n	8006202 <__pow5mult+0x5a>
 8006238:	4638      	mov	r0, r7
 800623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623e:	bf00      	nop
 8006240:	08006b20 	.word	0x08006b20

08006244 <__lshift>:
 8006244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	460c      	mov	r4, r1
 800624a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	6849      	ldr	r1, [r1, #4]
 8006252:	eb0a 0903 	add.w	r9, sl, r3
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	4607      	mov	r7, r0
 800625a:	4616      	mov	r6, r2
 800625c:	f109 0501 	add.w	r5, r9, #1
 8006260:	42ab      	cmp	r3, r5
 8006262:	db32      	blt.n	80062ca <__lshift+0x86>
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff fe2c 	bl	8005ec2 <_Balloc>
 800626a:	2300      	movs	r3, #0
 800626c:	4680      	mov	r8, r0
 800626e:	f100 0114 	add.w	r1, r0, #20
 8006272:	461a      	mov	r2, r3
 8006274:	4553      	cmp	r3, sl
 8006276:	db2b      	blt.n	80062d0 <__lshift+0x8c>
 8006278:	6920      	ldr	r0, [r4, #16]
 800627a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800627e:	f104 0314 	add.w	r3, r4, #20
 8006282:	f016 021f 	ands.w	r2, r6, #31
 8006286:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800628a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800628e:	d025      	beq.n	80062dc <__lshift+0x98>
 8006290:	f1c2 0e20 	rsb	lr, r2, #32
 8006294:	2000      	movs	r0, #0
 8006296:	681e      	ldr	r6, [r3, #0]
 8006298:	468a      	mov	sl, r1
 800629a:	4096      	lsls	r6, r2
 800629c:	4330      	orrs	r0, r6
 800629e:	f84a 0b04 	str.w	r0, [sl], #4
 80062a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80062a6:	459c      	cmp	ip, r3
 80062a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80062ac:	d814      	bhi.n	80062d8 <__lshift+0x94>
 80062ae:	6048      	str	r0, [r1, #4]
 80062b0:	b108      	cbz	r0, 80062b6 <__lshift+0x72>
 80062b2:	f109 0502 	add.w	r5, r9, #2
 80062b6:	3d01      	subs	r5, #1
 80062b8:	4638      	mov	r0, r7
 80062ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80062be:	4621      	mov	r1, r4
 80062c0:	f7ff fe33 	bl	8005f2a <_Bfree>
 80062c4:	4640      	mov	r0, r8
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	3101      	adds	r1, #1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	e7c7      	b.n	8006260 <__lshift+0x1c>
 80062d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80062d4:	3301      	adds	r3, #1
 80062d6:	e7cd      	b.n	8006274 <__lshift+0x30>
 80062d8:	4651      	mov	r1, sl
 80062da:	e7dc      	b.n	8006296 <__lshift+0x52>
 80062dc:	3904      	subs	r1, #4
 80062de:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80062e6:	459c      	cmp	ip, r3
 80062e8:	d8f9      	bhi.n	80062de <__lshift+0x9a>
 80062ea:	e7e4      	b.n	80062b6 <__lshift+0x72>

080062ec <__mcmp>:
 80062ec:	6903      	ldr	r3, [r0, #16]
 80062ee:	690a      	ldr	r2, [r1, #16]
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	b530      	push	{r4, r5, lr}
 80062f4:	d10c      	bne.n	8006310 <__mcmp+0x24>
 80062f6:	0092      	lsls	r2, r2, #2
 80062f8:	3014      	adds	r0, #20
 80062fa:	3114      	adds	r1, #20
 80062fc:	1884      	adds	r4, r0, r2
 80062fe:	4411      	add	r1, r2
 8006300:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006304:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006308:	4295      	cmp	r5, r2
 800630a:	d003      	beq.n	8006314 <__mcmp+0x28>
 800630c:	d305      	bcc.n	800631a <__mcmp+0x2e>
 800630e:	2301      	movs	r3, #1
 8006310:	4618      	mov	r0, r3
 8006312:	bd30      	pop	{r4, r5, pc}
 8006314:	42a0      	cmp	r0, r4
 8006316:	d3f3      	bcc.n	8006300 <__mcmp+0x14>
 8006318:	e7fa      	b.n	8006310 <__mcmp+0x24>
 800631a:	f04f 33ff 	mov.w	r3, #4294967295
 800631e:	e7f7      	b.n	8006310 <__mcmp+0x24>

08006320 <__mdiff>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	460d      	mov	r5, r1
 8006326:	4607      	mov	r7, r0
 8006328:	4611      	mov	r1, r2
 800632a:	4628      	mov	r0, r5
 800632c:	4614      	mov	r4, r2
 800632e:	f7ff ffdd 	bl	80062ec <__mcmp>
 8006332:	1e06      	subs	r6, r0, #0
 8006334:	d108      	bne.n	8006348 <__mdiff+0x28>
 8006336:	4631      	mov	r1, r6
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fdc2 	bl	8005ec2 <_Balloc>
 800633e:	2301      	movs	r3, #1
 8006340:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	bfa4      	itt	ge
 800634a:	4623      	movge	r3, r4
 800634c:	462c      	movge	r4, r5
 800634e:	4638      	mov	r0, r7
 8006350:	6861      	ldr	r1, [r4, #4]
 8006352:	bfa6      	itte	ge
 8006354:	461d      	movge	r5, r3
 8006356:	2600      	movge	r6, #0
 8006358:	2601      	movlt	r6, #1
 800635a:	f7ff fdb2 	bl	8005ec2 <_Balloc>
 800635e:	692b      	ldr	r3, [r5, #16]
 8006360:	60c6      	str	r6, [r0, #12]
 8006362:	6926      	ldr	r6, [r4, #16]
 8006364:	f105 0914 	add.w	r9, r5, #20
 8006368:	f104 0214 	add.w	r2, r4, #20
 800636c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006370:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006374:	f100 0514 	add.w	r5, r0, #20
 8006378:	f04f 0e00 	mov.w	lr, #0
 800637c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006380:	f859 4b04 	ldr.w	r4, [r9], #4
 8006384:	fa1e f18a 	uxtah	r1, lr, sl
 8006388:	b2a3      	uxth	r3, r4
 800638a:	1ac9      	subs	r1, r1, r3
 800638c:	0c23      	lsrs	r3, r4, #16
 800638e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006392:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006396:	b289      	uxth	r1, r1
 8006398:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800639c:	45c8      	cmp	r8, r9
 800639e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063a2:	4694      	mov	ip, r2
 80063a4:	f845 3b04 	str.w	r3, [r5], #4
 80063a8:	d8e8      	bhi.n	800637c <__mdiff+0x5c>
 80063aa:	45bc      	cmp	ip, r7
 80063ac:	d304      	bcc.n	80063b8 <__mdiff+0x98>
 80063ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063b2:	b183      	cbz	r3, 80063d6 <__mdiff+0xb6>
 80063b4:	6106      	str	r6, [r0, #16]
 80063b6:	e7c5      	b.n	8006344 <__mdiff+0x24>
 80063b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063bc:	fa1e f381 	uxtah	r3, lr, r1
 80063c0:	141a      	asrs	r2, r3, #16
 80063c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80063d0:	f845 3b04 	str.w	r3, [r5], #4
 80063d4:	e7e9      	b.n	80063aa <__mdiff+0x8a>
 80063d6:	3e01      	subs	r6, #1
 80063d8:	e7e9      	b.n	80063ae <__mdiff+0x8e>

080063da <__d2b>:
 80063da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063de:	460e      	mov	r6, r1
 80063e0:	2101      	movs	r1, #1
 80063e2:	ec59 8b10 	vmov	r8, r9, d0
 80063e6:	4615      	mov	r5, r2
 80063e8:	f7ff fd6b 	bl	8005ec2 <_Balloc>
 80063ec:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063f0:	4607      	mov	r7, r0
 80063f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063f6:	bb34      	cbnz	r4, 8006446 <__d2b+0x6c>
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	f1b8 0300 	subs.w	r3, r8, #0
 80063fe:	d027      	beq.n	8006450 <__d2b+0x76>
 8006400:	a802      	add	r0, sp, #8
 8006402:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006406:	f7ff fe01 	bl	800600c <__lo0bits>
 800640a:	9900      	ldr	r1, [sp, #0]
 800640c:	b1f0      	cbz	r0, 800644c <__d2b+0x72>
 800640e:	9a01      	ldr	r2, [sp, #4]
 8006410:	f1c0 0320 	rsb	r3, r0, #32
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	430b      	orrs	r3, r1
 800641a:	40c2      	lsrs	r2, r0
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf14      	ite	ne
 8006428:	2102      	movne	r1, #2
 800642a:	2101      	moveq	r1, #1
 800642c:	6139      	str	r1, [r7, #16]
 800642e:	b1c4      	cbz	r4, 8006462 <__d2b+0x88>
 8006430:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006434:	4404      	add	r4, r0
 8006436:	6034      	str	r4, [r6, #0]
 8006438:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800643c:	6028      	str	r0, [r5, #0]
 800643e:	4638      	mov	r0, r7
 8006440:	b003      	add	sp, #12
 8006442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800644a:	e7d5      	b.n	80063f8 <__d2b+0x1e>
 800644c:	6179      	str	r1, [r7, #20]
 800644e:	e7e7      	b.n	8006420 <__d2b+0x46>
 8006450:	a801      	add	r0, sp, #4
 8006452:	f7ff fddb 	bl	800600c <__lo0bits>
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	2101      	movs	r1, #1
 800645c:	6139      	str	r1, [r7, #16]
 800645e:	3020      	adds	r0, #32
 8006460:	e7e5      	b.n	800642e <__d2b+0x54>
 8006462:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006466:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800646a:	6030      	str	r0, [r6, #0]
 800646c:	6918      	ldr	r0, [r3, #16]
 800646e:	f7ff fdae 	bl	8005fce <__hi0bits>
 8006472:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006476:	e7e1      	b.n	800643c <__d2b+0x62>

08006478 <_calloc_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	fb02 f401 	mul.w	r4, r2, r1
 800647e:	4621      	mov	r1, r4
 8006480:	f000 f856 	bl	8006530 <_malloc_r>
 8006484:	4605      	mov	r5, r0
 8006486:	b118      	cbz	r0, 8006490 <_calloc_r+0x18>
 8006488:	4622      	mov	r2, r4
 800648a:	2100      	movs	r1, #0
 800648c:	f7fe fa30 	bl	80048f0 <memset>
 8006490:	4628      	mov	r0, r5
 8006492:	bd38      	pop	{r3, r4, r5, pc}

08006494 <_free_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4605      	mov	r5, r0
 8006498:	2900      	cmp	r1, #0
 800649a:	d045      	beq.n	8006528 <_free_r+0x94>
 800649c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a0:	1f0c      	subs	r4, r1, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfb8      	it	lt
 80064a6:	18e4      	addlt	r4, r4, r3
 80064a8:	f000 fa29 	bl	80068fe <__malloc_lock>
 80064ac:	4a1f      	ldr	r2, [pc, #124]	; (800652c <_free_r+0x98>)
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	4610      	mov	r0, r2
 80064b2:	b933      	cbnz	r3, 80064c2 <_free_r+0x2e>
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	6014      	str	r4, [r2, #0]
 80064b8:	4628      	mov	r0, r5
 80064ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064be:	f000 ba1f 	b.w	8006900 <__malloc_unlock>
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	d90c      	bls.n	80064e0 <_free_r+0x4c>
 80064c6:	6821      	ldr	r1, [r4, #0]
 80064c8:	1862      	adds	r2, r4, r1
 80064ca:	4293      	cmp	r3, r2
 80064cc:	bf04      	itt	eq
 80064ce:	681a      	ldreq	r2, [r3, #0]
 80064d0:	685b      	ldreq	r3, [r3, #4]
 80064d2:	6063      	str	r3, [r4, #4]
 80064d4:	bf04      	itt	eq
 80064d6:	1852      	addeq	r2, r2, r1
 80064d8:	6022      	streq	r2, [r4, #0]
 80064da:	6004      	str	r4, [r0, #0]
 80064dc:	e7ec      	b.n	80064b8 <_free_r+0x24>
 80064de:	4613      	mov	r3, r2
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	b10a      	cbz	r2, 80064e8 <_free_r+0x54>
 80064e4:	42a2      	cmp	r2, r4
 80064e6:	d9fa      	bls.n	80064de <_free_r+0x4a>
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	1858      	adds	r0, r3, r1
 80064ec:	42a0      	cmp	r0, r4
 80064ee:	d10b      	bne.n	8006508 <_free_r+0x74>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	4401      	add	r1, r0
 80064f4:	1858      	adds	r0, r3, r1
 80064f6:	4282      	cmp	r2, r0
 80064f8:	6019      	str	r1, [r3, #0]
 80064fa:	d1dd      	bne.n	80064b8 <_free_r+0x24>
 80064fc:	6810      	ldr	r0, [r2, #0]
 80064fe:	6852      	ldr	r2, [r2, #4]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	4401      	add	r1, r0
 8006504:	6019      	str	r1, [r3, #0]
 8006506:	e7d7      	b.n	80064b8 <_free_r+0x24>
 8006508:	d902      	bls.n	8006510 <_free_r+0x7c>
 800650a:	230c      	movs	r3, #12
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	e7d3      	b.n	80064b8 <_free_r+0x24>
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	1821      	adds	r1, r4, r0
 8006514:	428a      	cmp	r2, r1
 8006516:	bf04      	itt	eq
 8006518:	6811      	ldreq	r1, [r2, #0]
 800651a:	6852      	ldreq	r2, [r2, #4]
 800651c:	6062      	str	r2, [r4, #4]
 800651e:	bf04      	itt	eq
 8006520:	1809      	addeq	r1, r1, r0
 8006522:	6021      	streq	r1, [r4, #0]
 8006524:	605c      	str	r4, [r3, #4]
 8006526:	e7c7      	b.n	80064b8 <_free_r+0x24>
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	20000210 	.word	0x20000210

08006530 <_malloc_r>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	1ccd      	adds	r5, r1, #3
 8006534:	f025 0503 	bic.w	r5, r5, #3
 8006538:	3508      	adds	r5, #8
 800653a:	2d0c      	cmp	r5, #12
 800653c:	bf38      	it	cc
 800653e:	250c      	movcc	r5, #12
 8006540:	2d00      	cmp	r5, #0
 8006542:	4606      	mov	r6, r0
 8006544:	db01      	blt.n	800654a <_malloc_r+0x1a>
 8006546:	42a9      	cmp	r1, r5
 8006548:	d903      	bls.n	8006552 <_malloc_r+0x22>
 800654a:	230c      	movs	r3, #12
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	2000      	movs	r0, #0
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	f000 f9d4 	bl	80068fe <__malloc_lock>
 8006556:	4a21      	ldr	r2, [pc, #132]	; (80065dc <_malloc_r+0xac>)
 8006558:	6814      	ldr	r4, [r2, #0]
 800655a:	4621      	mov	r1, r4
 800655c:	b991      	cbnz	r1, 8006584 <_malloc_r+0x54>
 800655e:	4c20      	ldr	r4, [pc, #128]	; (80065e0 <_malloc_r+0xb0>)
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	b91b      	cbnz	r3, 800656c <_malloc_r+0x3c>
 8006564:	4630      	mov	r0, r6
 8006566:	f000 f98f 	bl	8006888 <_sbrk_r>
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	4629      	mov	r1, r5
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f98a 	bl	8006888 <_sbrk_r>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d124      	bne.n	80065c2 <_malloc_r+0x92>
 8006578:	230c      	movs	r3, #12
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f9bf 	bl	8006900 <__malloc_unlock>
 8006582:	e7e4      	b.n	800654e <_malloc_r+0x1e>
 8006584:	680b      	ldr	r3, [r1, #0]
 8006586:	1b5b      	subs	r3, r3, r5
 8006588:	d418      	bmi.n	80065bc <_malloc_r+0x8c>
 800658a:	2b0b      	cmp	r3, #11
 800658c:	d90f      	bls.n	80065ae <_malloc_r+0x7e>
 800658e:	600b      	str	r3, [r1, #0]
 8006590:	50cd      	str	r5, [r1, r3]
 8006592:	18cc      	adds	r4, r1, r3
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f9b3 	bl	8006900 <__malloc_unlock>
 800659a:	f104 000b 	add.w	r0, r4, #11
 800659e:	1d23      	adds	r3, r4, #4
 80065a0:	f020 0007 	bic.w	r0, r0, #7
 80065a4:	1ac3      	subs	r3, r0, r3
 80065a6:	d0d3      	beq.n	8006550 <_malloc_r+0x20>
 80065a8:	425a      	negs	r2, r3
 80065aa:	50e2      	str	r2, [r4, r3]
 80065ac:	e7d0      	b.n	8006550 <_malloc_r+0x20>
 80065ae:	428c      	cmp	r4, r1
 80065b0:	684b      	ldr	r3, [r1, #4]
 80065b2:	bf16      	itet	ne
 80065b4:	6063      	strne	r3, [r4, #4]
 80065b6:	6013      	streq	r3, [r2, #0]
 80065b8:	460c      	movne	r4, r1
 80065ba:	e7eb      	b.n	8006594 <_malloc_r+0x64>
 80065bc:	460c      	mov	r4, r1
 80065be:	6849      	ldr	r1, [r1, #4]
 80065c0:	e7cc      	b.n	800655c <_malloc_r+0x2c>
 80065c2:	1cc4      	adds	r4, r0, #3
 80065c4:	f024 0403 	bic.w	r4, r4, #3
 80065c8:	42a0      	cmp	r0, r4
 80065ca:	d005      	beq.n	80065d8 <_malloc_r+0xa8>
 80065cc:	1a21      	subs	r1, r4, r0
 80065ce:	4630      	mov	r0, r6
 80065d0:	f000 f95a 	bl	8006888 <_sbrk_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d0cf      	beq.n	8006578 <_malloc_r+0x48>
 80065d8:	6025      	str	r5, [r4, #0]
 80065da:	e7db      	b.n	8006594 <_malloc_r+0x64>
 80065dc:	20000210 	.word	0x20000210
 80065e0:	20000214 	.word	0x20000214

080065e4 <__ssputs_r>:
 80065e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	688e      	ldr	r6, [r1, #8]
 80065ea:	429e      	cmp	r6, r3
 80065ec:	4682      	mov	sl, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	4690      	mov	r8, r2
 80065f2:	4699      	mov	r9, r3
 80065f4:	d837      	bhi.n	8006666 <__ssputs_r+0x82>
 80065f6:	898a      	ldrh	r2, [r1, #12]
 80065f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065fc:	d031      	beq.n	8006662 <__ssputs_r+0x7e>
 80065fe:	6825      	ldr	r5, [r4, #0]
 8006600:	6909      	ldr	r1, [r1, #16]
 8006602:	1a6f      	subs	r7, r5, r1
 8006604:	6965      	ldr	r5, [r4, #20]
 8006606:	2302      	movs	r3, #2
 8006608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800660c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006610:	f109 0301 	add.w	r3, r9, #1
 8006614:	443b      	add	r3, r7
 8006616:	429d      	cmp	r5, r3
 8006618:	bf38      	it	cc
 800661a:	461d      	movcc	r5, r3
 800661c:	0553      	lsls	r3, r2, #21
 800661e:	d530      	bpl.n	8006682 <__ssputs_r+0x9e>
 8006620:	4629      	mov	r1, r5
 8006622:	f7ff ff85 	bl	8006530 <_malloc_r>
 8006626:	4606      	mov	r6, r0
 8006628:	b950      	cbnz	r0, 8006640 <__ssputs_r+0x5c>
 800662a:	230c      	movs	r3, #12
 800662c:	f8ca 3000 	str.w	r3, [sl]
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	463a      	mov	r2, r7
 8006642:	6921      	ldr	r1, [r4, #16]
 8006644:	f7ff fc32 	bl	8005eac <memcpy>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	81a3      	strh	r3, [r4, #12]
 8006654:	6126      	str	r6, [r4, #16]
 8006656:	6165      	str	r5, [r4, #20]
 8006658:	443e      	add	r6, r7
 800665a:	1bed      	subs	r5, r5, r7
 800665c:	6026      	str	r6, [r4, #0]
 800665e:	60a5      	str	r5, [r4, #8]
 8006660:	464e      	mov	r6, r9
 8006662:	454e      	cmp	r6, r9
 8006664:	d900      	bls.n	8006668 <__ssputs_r+0x84>
 8006666:	464e      	mov	r6, r9
 8006668:	4632      	mov	r2, r6
 800666a:	4641      	mov	r1, r8
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	f000 f92d 	bl	80068cc <memmove>
 8006672:	68a3      	ldr	r3, [r4, #8]
 8006674:	1b9b      	subs	r3, r3, r6
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	441e      	add	r6, r3
 800667c:	6026      	str	r6, [r4, #0]
 800667e:	2000      	movs	r0, #0
 8006680:	e7dc      	b.n	800663c <__ssputs_r+0x58>
 8006682:	462a      	mov	r2, r5
 8006684:	f000 f93d 	bl	8006902 <_realloc_r>
 8006688:	4606      	mov	r6, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d1e2      	bne.n	8006654 <__ssputs_r+0x70>
 800668e:	6921      	ldr	r1, [r4, #16]
 8006690:	4650      	mov	r0, sl
 8006692:	f7ff feff 	bl	8006494 <_free_r>
 8006696:	e7c8      	b.n	800662a <__ssputs_r+0x46>

08006698 <_svfiprintf_r>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	461d      	mov	r5, r3
 800669e:	898b      	ldrh	r3, [r1, #12]
 80066a0:	061f      	lsls	r7, r3, #24
 80066a2:	b09d      	sub	sp, #116	; 0x74
 80066a4:	4680      	mov	r8, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	4616      	mov	r6, r2
 80066aa:	d50f      	bpl.n	80066cc <_svfiprintf_r+0x34>
 80066ac:	690b      	ldr	r3, [r1, #16]
 80066ae:	b96b      	cbnz	r3, 80066cc <_svfiprintf_r+0x34>
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	f7ff ff3d 	bl	8006530 <_malloc_r>
 80066b6:	6020      	str	r0, [r4, #0]
 80066b8:	6120      	str	r0, [r4, #16]
 80066ba:	b928      	cbnz	r0, 80066c8 <_svfiprintf_r+0x30>
 80066bc:	230c      	movs	r3, #12
 80066be:	f8c8 3000 	str.w	r3, [r8]
 80066c2:	f04f 30ff 	mov.w	r0, #4294967295
 80066c6:	e0c8      	b.n	800685a <_svfiprintf_r+0x1c2>
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	6163      	str	r3, [r4, #20]
 80066cc:	2300      	movs	r3, #0
 80066ce:	9309      	str	r3, [sp, #36]	; 0x24
 80066d0:	2320      	movs	r3, #32
 80066d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066d6:	2330      	movs	r3, #48	; 0x30
 80066d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066dc:	9503      	str	r5, [sp, #12]
 80066de:	f04f 0b01 	mov.w	fp, #1
 80066e2:	4637      	mov	r7, r6
 80066e4:	463d      	mov	r5, r7
 80066e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066ea:	b10b      	cbz	r3, 80066f0 <_svfiprintf_r+0x58>
 80066ec:	2b25      	cmp	r3, #37	; 0x25
 80066ee:	d13e      	bne.n	800676e <_svfiprintf_r+0xd6>
 80066f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80066f4:	d00b      	beq.n	800670e <_svfiprintf_r+0x76>
 80066f6:	4653      	mov	r3, sl
 80066f8:	4632      	mov	r2, r6
 80066fa:	4621      	mov	r1, r4
 80066fc:	4640      	mov	r0, r8
 80066fe:	f7ff ff71 	bl	80065e4 <__ssputs_r>
 8006702:	3001      	adds	r0, #1
 8006704:	f000 80a4 	beq.w	8006850 <_svfiprintf_r+0x1b8>
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	4453      	add	r3, sl
 800670c:	9309      	str	r3, [sp, #36]	; 0x24
 800670e:	783b      	ldrb	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 809d 	beq.w	8006850 <_svfiprintf_r+0x1b8>
 8006716:	2300      	movs	r3, #0
 8006718:	f04f 32ff 	mov.w	r2, #4294967295
 800671c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006728:	931a      	str	r3, [sp, #104]	; 0x68
 800672a:	462f      	mov	r7, r5
 800672c:	2205      	movs	r2, #5
 800672e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006732:	4850      	ldr	r0, [pc, #320]	; (8006874 <_svfiprintf_r+0x1dc>)
 8006734:	f7f9 fd5c 	bl	80001f0 <memchr>
 8006738:	9b04      	ldr	r3, [sp, #16]
 800673a:	b9d0      	cbnz	r0, 8006772 <_svfiprintf_r+0xda>
 800673c:	06d9      	lsls	r1, r3, #27
 800673e:	bf44      	itt	mi
 8006740:	2220      	movmi	r2, #32
 8006742:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006746:	071a      	lsls	r2, r3, #28
 8006748:	bf44      	itt	mi
 800674a:	222b      	movmi	r2, #43	; 0x2b
 800674c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006750:	782a      	ldrb	r2, [r5, #0]
 8006752:	2a2a      	cmp	r2, #42	; 0x2a
 8006754:	d015      	beq.n	8006782 <_svfiprintf_r+0xea>
 8006756:	9a07      	ldr	r2, [sp, #28]
 8006758:	462f      	mov	r7, r5
 800675a:	2000      	movs	r0, #0
 800675c:	250a      	movs	r5, #10
 800675e:	4639      	mov	r1, r7
 8006760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006764:	3b30      	subs	r3, #48	; 0x30
 8006766:	2b09      	cmp	r3, #9
 8006768:	d94d      	bls.n	8006806 <_svfiprintf_r+0x16e>
 800676a:	b1b8      	cbz	r0, 800679c <_svfiprintf_r+0x104>
 800676c:	e00f      	b.n	800678e <_svfiprintf_r+0xf6>
 800676e:	462f      	mov	r7, r5
 8006770:	e7b8      	b.n	80066e4 <_svfiprintf_r+0x4c>
 8006772:	4a40      	ldr	r2, [pc, #256]	; (8006874 <_svfiprintf_r+0x1dc>)
 8006774:	1a80      	subs	r0, r0, r2
 8006776:	fa0b f000 	lsl.w	r0, fp, r0
 800677a:	4318      	orrs	r0, r3
 800677c:	9004      	str	r0, [sp, #16]
 800677e:	463d      	mov	r5, r7
 8006780:	e7d3      	b.n	800672a <_svfiprintf_r+0x92>
 8006782:	9a03      	ldr	r2, [sp, #12]
 8006784:	1d11      	adds	r1, r2, #4
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	9103      	str	r1, [sp, #12]
 800678a:	2a00      	cmp	r2, #0
 800678c:	db01      	blt.n	8006792 <_svfiprintf_r+0xfa>
 800678e:	9207      	str	r2, [sp, #28]
 8006790:	e004      	b.n	800679c <_svfiprintf_r+0x104>
 8006792:	4252      	negs	r2, r2
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	9207      	str	r2, [sp, #28]
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	783b      	ldrb	r3, [r7, #0]
 800679e:	2b2e      	cmp	r3, #46	; 0x2e
 80067a0:	d10c      	bne.n	80067bc <_svfiprintf_r+0x124>
 80067a2:	787b      	ldrb	r3, [r7, #1]
 80067a4:	2b2a      	cmp	r3, #42	; 0x2a
 80067a6:	d133      	bne.n	8006810 <_svfiprintf_r+0x178>
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	9203      	str	r2, [sp, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bfb8      	it	lt
 80067b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b8:	3702      	adds	r7, #2
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	4d2e      	ldr	r5, [pc, #184]	; (8006878 <_svfiprintf_r+0x1e0>)
 80067be:	7839      	ldrb	r1, [r7, #0]
 80067c0:	2203      	movs	r2, #3
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7f9 fd14 	bl	80001f0 <memchr>
 80067c8:	b138      	cbz	r0, 80067da <_svfiprintf_r+0x142>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	1b40      	subs	r0, r0, r5
 80067ce:	fa03 f000 	lsl.w	r0, r3, r0
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	4303      	orrs	r3, r0
 80067d6:	3701      	adds	r7, #1
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	7839      	ldrb	r1, [r7, #0]
 80067dc:	4827      	ldr	r0, [pc, #156]	; (800687c <_svfiprintf_r+0x1e4>)
 80067de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e2:	2206      	movs	r2, #6
 80067e4:	1c7e      	adds	r6, r7, #1
 80067e6:	f7f9 fd03 	bl	80001f0 <memchr>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d038      	beq.n	8006860 <_svfiprintf_r+0x1c8>
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <_svfiprintf_r+0x1e8>)
 80067f0:	bb13      	cbnz	r3, 8006838 <_svfiprintf_r+0x1a0>
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	3307      	adds	r3, #7
 80067f6:	f023 0307 	bic.w	r3, r3, #7
 80067fa:	3308      	adds	r3, #8
 80067fc:	9303      	str	r3, [sp, #12]
 80067fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006800:	444b      	add	r3, r9
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	e76d      	b.n	80066e2 <_svfiprintf_r+0x4a>
 8006806:	fb05 3202 	mla	r2, r5, r2, r3
 800680a:	2001      	movs	r0, #1
 800680c:	460f      	mov	r7, r1
 800680e:	e7a6      	b.n	800675e <_svfiprintf_r+0xc6>
 8006810:	2300      	movs	r3, #0
 8006812:	3701      	adds	r7, #1
 8006814:	9305      	str	r3, [sp, #20]
 8006816:	4619      	mov	r1, r3
 8006818:	250a      	movs	r5, #10
 800681a:	4638      	mov	r0, r7
 800681c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006820:	3a30      	subs	r2, #48	; 0x30
 8006822:	2a09      	cmp	r2, #9
 8006824:	d903      	bls.n	800682e <_svfiprintf_r+0x196>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0c8      	beq.n	80067bc <_svfiprintf_r+0x124>
 800682a:	9105      	str	r1, [sp, #20]
 800682c:	e7c6      	b.n	80067bc <_svfiprintf_r+0x124>
 800682e:	fb05 2101 	mla	r1, r5, r1, r2
 8006832:	2301      	movs	r3, #1
 8006834:	4607      	mov	r7, r0
 8006836:	e7f0      	b.n	800681a <_svfiprintf_r+0x182>
 8006838:	ab03      	add	r3, sp, #12
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	4622      	mov	r2, r4
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <_svfiprintf_r+0x1ec>)
 8006840:	a904      	add	r1, sp, #16
 8006842:	4640      	mov	r0, r8
 8006844:	f7fe f8f0 	bl	8004a28 <_printf_float>
 8006848:	f1b0 3fff 	cmp.w	r0, #4294967295
 800684c:	4681      	mov	r9, r0
 800684e:	d1d6      	bne.n	80067fe <_svfiprintf_r+0x166>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	065b      	lsls	r3, r3, #25
 8006854:	f53f af35 	bmi.w	80066c2 <_svfiprintf_r+0x2a>
 8006858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800685a:	b01d      	add	sp, #116	; 0x74
 800685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006860:	ab03      	add	r3, sp, #12
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4622      	mov	r2, r4
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <_svfiprintf_r+0x1ec>)
 8006868:	a904      	add	r1, sp, #16
 800686a:	4640      	mov	r0, r8
 800686c:	f7fe fb92 	bl	8004f94 <_printf_i>
 8006870:	e7ea      	b.n	8006848 <_svfiprintf_r+0x1b0>
 8006872:	bf00      	nop
 8006874:	08006b2c 	.word	0x08006b2c
 8006878:	08006b32 	.word	0x08006b32
 800687c:	08006b36 	.word	0x08006b36
 8006880:	08004a29 	.word	0x08004a29
 8006884:	080065e5 	.word	0x080065e5

08006888 <_sbrk_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4c06      	ldr	r4, [pc, #24]	; (80068a4 <_sbrk_r+0x1c>)
 800688c:	2300      	movs	r3, #0
 800688e:	4605      	mov	r5, r0
 8006890:	4608      	mov	r0, r1
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	f7fb f990 	bl	8001bb8 <_sbrk>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_sbrk_r+0x1a>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_sbrk_r+0x1a>
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	200004a0 	.word	0x200004a0

080068a8 <__ascii_mbtowc>:
 80068a8:	b082      	sub	sp, #8
 80068aa:	b901      	cbnz	r1, 80068ae <__ascii_mbtowc+0x6>
 80068ac:	a901      	add	r1, sp, #4
 80068ae:	b142      	cbz	r2, 80068c2 <__ascii_mbtowc+0x1a>
 80068b0:	b14b      	cbz	r3, 80068c6 <__ascii_mbtowc+0x1e>
 80068b2:	7813      	ldrb	r3, [r2, #0]
 80068b4:	600b      	str	r3, [r1, #0]
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	1c10      	adds	r0, r2, #0
 80068ba:	bf18      	it	ne
 80068bc:	2001      	movne	r0, #1
 80068be:	b002      	add	sp, #8
 80068c0:	4770      	bx	lr
 80068c2:	4610      	mov	r0, r2
 80068c4:	e7fb      	b.n	80068be <__ascii_mbtowc+0x16>
 80068c6:	f06f 0001 	mvn.w	r0, #1
 80068ca:	e7f8      	b.n	80068be <__ascii_mbtowc+0x16>

080068cc <memmove>:
 80068cc:	4288      	cmp	r0, r1
 80068ce:	b510      	push	{r4, lr}
 80068d0:	eb01 0302 	add.w	r3, r1, r2
 80068d4:	d807      	bhi.n	80068e6 <memmove+0x1a>
 80068d6:	1e42      	subs	r2, r0, #1
 80068d8:	4299      	cmp	r1, r3
 80068da:	d00a      	beq.n	80068f2 <memmove+0x26>
 80068dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068e4:	e7f8      	b.n	80068d8 <memmove+0xc>
 80068e6:	4283      	cmp	r3, r0
 80068e8:	d9f5      	bls.n	80068d6 <memmove+0xa>
 80068ea:	1881      	adds	r1, r0, r2
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	42d3      	cmn	r3, r2
 80068f0:	d100      	bne.n	80068f4 <memmove+0x28>
 80068f2:	bd10      	pop	{r4, pc}
 80068f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80068fc:	e7f7      	b.n	80068ee <memmove+0x22>

080068fe <__malloc_lock>:
 80068fe:	4770      	bx	lr

08006900 <__malloc_unlock>:
 8006900:	4770      	bx	lr

08006902 <_realloc_r>:
 8006902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006904:	4607      	mov	r7, r0
 8006906:	4614      	mov	r4, r2
 8006908:	460e      	mov	r6, r1
 800690a:	b921      	cbnz	r1, 8006916 <_realloc_r+0x14>
 800690c:	4611      	mov	r1, r2
 800690e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006912:	f7ff be0d 	b.w	8006530 <_malloc_r>
 8006916:	b922      	cbnz	r2, 8006922 <_realloc_r+0x20>
 8006918:	f7ff fdbc 	bl	8006494 <_free_r>
 800691c:	4625      	mov	r5, r4
 800691e:	4628      	mov	r0, r5
 8006920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006922:	f000 f821 	bl	8006968 <_malloc_usable_size_r>
 8006926:	42a0      	cmp	r0, r4
 8006928:	d20f      	bcs.n	800694a <_realloc_r+0x48>
 800692a:	4621      	mov	r1, r4
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff fdff 	bl	8006530 <_malloc_r>
 8006932:	4605      	mov	r5, r0
 8006934:	2800      	cmp	r0, #0
 8006936:	d0f2      	beq.n	800691e <_realloc_r+0x1c>
 8006938:	4631      	mov	r1, r6
 800693a:	4622      	mov	r2, r4
 800693c:	f7ff fab6 	bl	8005eac <memcpy>
 8006940:	4631      	mov	r1, r6
 8006942:	4638      	mov	r0, r7
 8006944:	f7ff fda6 	bl	8006494 <_free_r>
 8006948:	e7e9      	b.n	800691e <_realloc_r+0x1c>
 800694a:	4635      	mov	r5, r6
 800694c:	e7e7      	b.n	800691e <_realloc_r+0x1c>

0800694e <__ascii_wctomb>:
 800694e:	b149      	cbz	r1, 8006964 <__ascii_wctomb+0x16>
 8006950:	2aff      	cmp	r2, #255	; 0xff
 8006952:	bf85      	ittet	hi
 8006954:	238a      	movhi	r3, #138	; 0x8a
 8006956:	6003      	strhi	r3, [r0, #0]
 8006958:	700a      	strbls	r2, [r1, #0]
 800695a:	f04f 30ff 	movhi.w	r0, #4294967295
 800695e:	bf98      	it	ls
 8006960:	2001      	movls	r0, #1
 8006962:	4770      	bx	lr
 8006964:	4608      	mov	r0, r1
 8006966:	4770      	bx	lr

08006968 <_malloc_usable_size_r>:
 8006968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696c:	1f18      	subs	r0, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfbc      	itt	lt
 8006972:	580b      	ldrlt	r3, [r1, r0]
 8006974:	18c0      	addlt	r0, r0, r3
 8006976:	4770      	bx	lr

08006978 <_init>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr

08006984 <_fini>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr
